<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dr. rer. nat. Sören Wilke</title>
    <link>/</link>
      <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <description>Dr. rer. nat. Sören Wilke</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© Sören Wilke 2020</copyright><lastBuildDate>Sun, 05 Apr 2020 18:28:03 +0200</lastBuildDate>
    <image>
      <url>img/map[gravatar:%!s(bool=false) shape:circle]</url>
      <title>Dr. rer. nat. Sören Wilke</title>
      <link>/</link>
    </image>
    
    <item>
      <title>Example Page 1</title>
      <link>/courses/example/example1/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/example/example1/</guid>
      <description>&lt;p&gt;In this tutorial, I&amp;rsquo;ll share my top 10 tips for getting started with Academic:&lt;/p&gt;
&lt;h2 id=&#34;tip-1&#34;&gt;Tip 1&lt;/h2&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p&gt;
&lt;p&gt;Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p&gt;
&lt;p&gt;Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p&gt;
&lt;p&gt;Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p&gt;
&lt;p&gt;Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p&gt;
&lt;h2 id=&#34;tip-2&#34;&gt;Tip 2&lt;/h2&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p&gt;
&lt;p&gt;Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p&gt;
&lt;p&gt;Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p&gt;
&lt;p&gt;Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p&gt;
&lt;p&gt;Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Example Page 2</title>
      <link>/courses/example/example2/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/example/example2/</guid>
      <description>&lt;p&gt;Here are some more tips for getting started with Academic:&lt;/p&gt;
&lt;h2 id=&#34;tip-3&#34;&gt;Tip 3&lt;/h2&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p&gt;
&lt;p&gt;Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p&gt;
&lt;p&gt;Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p&gt;
&lt;p&gt;Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p&gt;
&lt;p&gt;Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p&gt;
&lt;h2 id=&#34;tip-4&#34;&gt;Tip 4&lt;/h2&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p&gt;
&lt;p&gt;Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p&gt;
&lt;p&gt;Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p&gt;
&lt;p&gt;Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p&gt;
&lt;p&gt;Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Example Talk</title>
      <link>/talk/example/</link>
      <pubDate>Sat, 01 Jun 2030 13:00:00 +0000</pubDate>
      <guid>/talk/example/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click on the &lt;strong&gt;Slides&lt;/strong&gt; button above to view the built-in slides feature.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Slides can be added in a few ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Create&lt;/strong&gt; slides using Academic&amp;rsquo;s 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content/#create-slides&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;Slides&lt;/em&gt;&lt;/a&gt; feature and link using &lt;code&gt;slides&lt;/code&gt; parameter in the front matter of the talk file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Upload&lt;/strong&gt; an existing slide deck to &lt;code&gt;static/&lt;/code&gt; and link using &lt;code&gt;url_slides&lt;/code&gt; parameter in the front matter of the talk file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Embed&lt;/strong&gt; your slides (e.g. Google Slides) or presentation video on this page using 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;shortcodes&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Further talk details can easily be added to this page using &lt;em&gt;Markdown&lt;/em&gt; and $\rm \LaTeX$ math code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Kriging with R: Exploring gstat</title>
      <link>/post/2020-09-10-kriging_with_r/kriging/</link>
      <pubDate>Wed, 09 Sep 2020 00:00:00 +0000</pubDate>
      <guid>/post/2020-09-10-kriging_with_r/kriging/</guid>
      <description>


&lt;p&gt;Back in June I wrote &lt;a href=&#34;https://swilke-geoscience.net/post/spatial_interpolation/&#34;&gt;a post&lt;/a&gt; about the basics of geospatial interpolation in R that, according to Twitter, resonated with a lot of people. It appears that there is a need for detailed tutorials on how to apply geospatial algorithms to real world data (at least in R). That is very understandable, as R is a very powerful and popular tool for spatial analysis, yet the package ecosystem for geospatial interpolation is exceptionally convoluted by todays standards.&lt;/p&gt;
&lt;p&gt;I therefore decided to follow up on the June-post and take another look on the applicability of R to very practical problems in the world of geospatial interpolation.&lt;/p&gt;
&lt;p&gt;One of the most famous and popular algorithms for geospatial interpolation is &lt;a href=&#34;https://en.wikipedia.org/wiki/Kriging&#34;&gt;Kriging&lt;/a&gt; and the standard package to realize Kriging in R is &lt;code&gt;gstat&lt;/code&gt;. In my blogpost from June I included Kriging as one of the methods presented there but took a massive short cut to carry out the actual computation by using the &lt;code&gt;automap&lt;/code&gt; package, that can sort out all the intricate &lt;code&gt;gstat&lt;/code&gt;-details for you, at the price of handing over all the control to the machine.&lt;/p&gt;
&lt;p&gt;The reason I used that short cut back then is that taking control by using &lt;code&gt;gstat&lt;/code&gt; directly is hard. So hard in fact, that this post here, that I originally intended to be a more or less comprehensive tour through the &lt;code&gt;gstat&lt;/code&gt;-universe, will now focus mainly on funneling your data in and out &lt;code&gt;gstat&lt;/code&gt;, just to make Kriging work. A more detailed account on the statistical backgrounds and certain aspects of model optimization will have to wait for another day.&lt;/p&gt;
&lt;p&gt;I suppose the main reason why working with &lt;code&gt;gstat&lt;/code&gt; these days is so difficult is because that package is a true R veteran. It is older than the tidyverse and the code base dates back to 1993. The interface is probably very different from anything you are used to work with.&lt;/p&gt;
&lt;p&gt;For handling spatial data, &lt;code&gt;gstat&lt;/code&gt; relies on the &lt;code&gt;sp&lt;/code&gt; package which itself has since been superseded mostly by package &lt;a href=&#34;https://r-spatial.github.io/sf/index.html&#34;&gt;sf&lt;/a&gt; today, which is much more convenient. Yet here we are and &lt;code&gt;gstat&lt;/code&gt; is still very much THE place to go if you want to do Kriging. So there is no point in further complaining and let’s see how we can make it work for any given dataset.&lt;/p&gt;
&lt;div id=&#34;setup&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# We will need some packages for (spatial) data processing
library(tidyverse) # wrangling tabular data and plotting
library(sf) # processing spatial vector data - the easy way
library(sp) # processing spatial vector data - the way gstat needs it
library(raster) # processing spatial raster data. !!!overwrites dplyr::select!!!

# Packages for geostatistics
library(gstat)   # The most popular R-Package for Kriging (imho)
library(automap) # Automatize some (or all) parts of the gstat-workflow 

# Finally, some packages to make pretty plots
library(patchwork)
library(viridis)

# Download the data for this tutorial from Github!
# The data for this tutorial is derived from a dataset published here
# https://www.opengeodata.nrw.de/produkte/umwelt_klima/wasser/flurabstandskarte_1988/
# licence information:
# Datenlizenz Deutschland – Flurabstandskarte NRW 1988 – Version 2.0
# see http://www.govdata.de/dl-de/by-2-0 for more details

grd_100_df &amp;lt;- readr::read_csv(
  &amp;quot;https://raw.githubusercontent.com/Ignimbrit/exchange/master/data/2020/grid_100.csv&amp;quot;,
  ) %&amp;gt;% 
  dplyr::select(-licence)

# The projection is EPSG 25832

head(grd_100_df)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 3
##        X       Y     Z
##    &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1 402040 5735960  62.2
## 2 402140 5735960  62.6
## 3 402240 5735960  63.0
## 4 402340 5735960  63.5
## 5 402440 5735960  63.9
## 6 402540 5735960  64.4&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The data for this tutorial is a xyz-file giving us the height of the groundwater table in some part of the German state of North Rhine-Westphalia in 1988. We can convert the data that we just read as a &lt;code&gt;tibble&lt;/code&gt; into a &lt;code&gt;RasterLayer&lt;/code&gt; and have a look.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;grd_100_rstr &amp;lt;- raster::rasterFromXYZ(
  grd_100_df, 
  res = c(100, 100), # resolution in meter (see crs)
  crs = &amp;quot;+proj=utm +zone=32 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs&amp;quot;
    )

plot(grd_100_rstr)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-09-10-kriging_with_R/2020-09-09-kriging-with-r-exploring-gstat_files/figure-html/ShowInitRaster-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Of course this is quite the contrary of the situation where geospatial interpolation is necessary - we already have a complete raster! So for the sake of training we will pretend we do not know the picture above. Let’s assume that back in 1988 we have measured the groundwater level at a generous yet limited number of locations, as it is often the case wen tasked with interpolating the groundwater table.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(42) # for reproducibility

# Simulate 100 random observation wells 
wellobs &amp;lt;- slice_sample(grd_100_df, n = 100)

ggplot(
  data = wellobs,
  mapping = aes(x = X, y = Y, color = Z)
) +
  geom_point(size = 3) + 
  scale_color_viridis(option = &amp;quot;B&amp;quot;) +
  theme_classic()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-09-10-kriging_with_R/2020-09-09-kriging-with-r-exploring-gstat_files/figure-html/SampleGrid-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Convert to {sf} because that is the best way to store spatial points
wellobs_sf &amp;lt;- st_as_sf(wellobs, coords = c(&amp;quot;X&amp;quot;, &amp;quot;Y&amp;quot;), crs = 25832) %&amp;gt;% 
  cbind(st_coordinates(.))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You might have noticed that when I switched to &lt;code&gt;sf&lt;/code&gt; in the chunk above, I included an extra step to store the X and Y coordinates of our observation not only in the geometry-column of the &lt;code&gt;sf&lt;/code&gt;-object but also in its tabular part. The reason for this is that for Universal Kriging, a certain flavor of Kriging we will learn more about later, the coordinates are also explicit model variables and this is the best way I could come up with to account for this dual-role.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;creating-a-variogram&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Creating a Variogram&lt;/h2&gt;
&lt;p&gt;In order to make Kriging work you need to supply a &lt;a href=&#34;https://en.wikipedia.org/wiki/Variogram&#34;&gt;variogram&lt;/a&gt;, which is essentially a function describing the relationship between distance and “Z” in your point data. I do not want to go into too much detail here, as “what are variograms” and “working with variograms in gstat” is enough material for two more blogposts. We will therefore rush a bit through this. First let’s create an empirical variogram, giving us the actual distribution of spatial dependencies observed in the data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# We will discuss later, what Z~1 does actually mean in this context
v_emp_OK &amp;lt;- gstat::variogram(
  Z~1,
  as(wellobs_sf, &amp;quot;Spatial&amp;quot;) # switch from {sf} to {sp}
  )

plot(v_emp_OK)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-09-10-kriging_with_R/2020-09-09-kriging-with-r-exploring-gstat_files/figure-html/VariEmp-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Note that I switched from &lt;code&gt;sf&lt;/code&gt; to &lt;code&gt;sp&lt;/code&gt; classes in my call to &lt;code&gt;variogram&lt;/code&gt; in order to make sure &lt;code&gt;gstat&lt;/code&gt; understands what is going on. In fact, by now, some support for &lt;code&gt;sf&lt;/code&gt; has been included in &lt;code&gt;gstat&lt;/code&gt; but my impression is that this support is fairly limited and should not be relied upon.&lt;/p&gt;
&lt;p&gt;Now that we have an empirical variogram, we need to fit a mathematical function so we can inter-/extrapolate. At this point we will take another short cut and have &lt;code&gt;automap&lt;/code&gt; do the work for us, because variogram modeling is not the topic of the day.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# automap&amp;#39;s autofitVariogram actually produces more info than we need.
# I will only keep the var_model part.
v_mod_OK &amp;lt;- automap::autofitVariogram(Z~1, as(wellobs_sf, &amp;quot;Spatial&amp;quot;))$var_model

# To inspect the automatic fit that was chosen for us we can use
# automap&amp;#39;s excellent build in methods for base::plot
plot(automap::autofitVariogram(Z~1, as(wellobs_sf, &amp;quot;Spatial&amp;quot;)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-09-10-kriging_with_R/2020-09-09-kriging-with-r-exploring-gstat_files/figure-html/VariFit-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;automap&lt;/code&gt; has determined the optimal variogram model (as far as &lt;code&gt;automap&lt;/code&gt; is concerned) for us and we can feed it into the Kriging algorithm. In this case, the function has determined that a “Stein’s parameterization” model with the parameters listed in the plot are the best fit. Other models that could be used to control the shape of the fitted curves are spherical (“Sph”), exponential (“Exp”), gaussian (“Gau”) and Matern (“Mat”). It is alternatively possible to specify all or some parameters in the call to &lt;code&gt;autofitVariogram&lt;/code&gt; and &lt;code&gt;automap&lt;/code&gt; will only optimize one the arguments we leave unspecified.&lt;/p&gt;
&lt;p&gt;Note that the variogram above implicitly assumes isotropic conditions, which means the semi-variance is the same regardless in which direction you look. This is not necessarily true (in fact, it probably isn’t) and we could dive deeper into this by inspecting several variograms for different directions (north, east, …). This can be achieved by providing an &lt;code&gt;alpha&lt;/code&gt; argument in the call to &lt;code&gt;autofitVariogram&lt;/code&gt; (or some of the many &lt;code&gt;gstat&lt;/code&gt; functions related to that topic). For the sake of brevity, I will not do that now and just assume spatial isotropy.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;defining-a-target-grid&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Defining a target grid&lt;/h2&gt;
&lt;p&gt;As explained in &lt;a href=&#34;https://swilke-geoscience.net/post/spatial_interpolation/&#34;&gt;my last blogpost on spatial interpolation&lt;/a&gt;, many interpolation methods expect you to provide them with a target set of coordinates (“X”, “Y”) for which the modeled variable (“Z”) ist to be interpolated. Usually that means coming up with some kind of “empty” grid or raster. This holds true for Kriging with &lt;code&gt;gstat&lt;/code&gt;, too, except everything is a little bit more complicated, because we need to do it in &lt;code&gt;sp&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# technically we already have a grid from the initial dataset, but as we are 
# still working under the pretense that our only available data are the 
# simulated observation wells, we will construct our grid from that object.

# Step 1: define a grid based on the bounding box of our observations
grd_100_sf &amp;lt;- wellobs_sf %&amp;gt;% 
  st_bbox() %&amp;gt;% 
  st_as_sfc() %&amp;gt;% 
  st_make_grid(
  cellsize = c(100, 100), # 100m pixel size
  what = &amp;quot;centers&amp;quot;
  ) %&amp;gt;%
  st_as_sf() %&amp;gt;%
  cbind(., st_coordinates(.))

# Step 2: making our grid work for gstat
grd_100_sp &amp;lt;- as(grd_100_sf, &amp;quot;Spatial&amp;quot;) # converting to {sp} format
gridded(grd_100_sp) &amp;lt;- TRUE             # informing the object that it is a grid
grd_100_sp &amp;lt;- as(grd_100_sp, &amp;quot;SpatialPixels&amp;quot;) # specifying what kind of grid

# That second step there is based on a discussion I found on Stackoverflow
# https://stackoverflow.com/questions/43436466/create-grid-in-r-for-kriging-in-gstat&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, making practical grids is surprisingly verbose, given how common it is to need one when dealing with spatial operations in R in general. Somebody should probably write a package to address this issue.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;kriging&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Kriging&lt;/h2&gt;
&lt;p&gt;Kriging comes in several flavours. I will focus here on three rather common and basic variants: “Ordinary”, “Simple”, and “Universal” Kriging. What’s the difference between those three?&lt;/p&gt;
&lt;p&gt;Simple Kriging assumes that the mean in your target area (your grid template (also known as “the random field”)) is constant and known to you. Local variability is just that: a deviation from the norm which is to be accounted for.&lt;/p&gt;
&lt;p&gt;Ordinary Kriging is almost the same, just this time you do not know the value of the mean.&lt;/p&gt;
&lt;p&gt;For Universal Kriging now you do not longer have a level plane with some bumps in it, but instead you are dealing with a tilted or even curved surface (still with bumps in it).&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;gstat&lt;/code&gt;, the main way to differentiate between different kinds of Kriging (or any of the implemented algorithms) is controlled by the formula supplied. We have already seen that syntax when fitting the variogram. The best way to explain this is probably by looking at examples.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Ordinary Kriging
OK &amp;lt;- krige(
  Z~1,                       # Z is our variable and &amp;quot;~1&amp;quot; means &amp;quot;depends on mean&amp;quot;
  as(wellobs_sf, &amp;quot;Spatial&amp;quot;), # input data in {sp} format
  grd_100_sp,                # locations to interpolate at
  model = v_mod_OK           # the variogram model fitted above
  )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [using ordinary kriging]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Simple Kriging
SK &amp;lt;- krige(
  Z~1,                       # Z still depends on mean
  beta = mean(grd_100_df$Z), # but this time we know the mean&amp;#39;s value
  as(wellobs_sf, &amp;quot;Spatial&amp;quot;), # input data in {sp} format
  grd_100_sp,                # locations to interpolate at
  model = v_mod_OK           # the variogram model fitted above
  )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [using simple kriging]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Universal Kriging
# Implementing this method is somewhat different.
# we no longer assume that Z is essentially depending on a single mean but
# rather on the position of the interpolation location within our target grid
UK &amp;lt;- krige(
  Z~coords.x1+coords.x2, # Think &amp;quot;Z~X+Y&amp;quot; but {sp} conversion alters variable naming
  as(wellobs_sf, &amp;quot;Spatial&amp;quot;), # input data in {sp} format (`X` --&amp;gt; `coords.x1`)
  grd_100_sp,                # locations to interpolate at
  model = autofitVariogram(  # we need an appropriate variogram fit
    Z~X+Y,                   # here we can keep &amp;quot;X+Y&amp;quot; - it&amp;#39;s just how it is
    as(wellobs_sf, &amp;quot;Spatial&amp;quot;)
    )$var_model
  )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [using universal kriging]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# I&amp;#39;ll also add an inverse distance weighted model to provide a baseline
# for model evaluation
# Note how the only difference to Ordinary Kriging is the absence of a
# fitted variogram model
idwres &amp;lt;- idw(
  Z~1,                       # idw also depends on mean
  as(wellobs_sf, &amp;quot;Spatial&amp;quot;), # input data in {sp} format
  grd_100_sp,                # locations to interpolate at
) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [inverse distance weighted interpolation]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, Universal Kriging is a bit more difficult to realize than the other two. But these difficulties mostly arise from the fact that we need to switch between &lt;code&gt;sf&lt;/code&gt; and &lt;code&gt;sp&lt;/code&gt; objects and loose our variable names on the way. One could avoid that by working in &lt;code&gt;sp&lt;/code&gt; only, but then making a grid template and overall working with our spatial point information would become really inconvenient. I do not recommend.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;inspect-the-results&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Inspect the results&lt;/h2&gt;
&lt;p&gt;Now that we have all interpolations ready we can plot the resulting rasters. I will use a little function I defined back in June to make things a little easier.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# A function to plot rasters
plot_my_gstat_output &amp;lt;- function(raster_object, object_name){
  
  df &amp;lt;- rasterToPoints(raster_object) %&amp;gt;% as_tibble()
  colnames(df) &amp;lt;- c(&amp;quot;X&amp;quot;, &amp;quot;Y&amp;quot;, &amp;quot;Z&amp;quot;)
  
  ggplot(df, aes(x = X, y = Y, fill = Z)) +
    geom_raster() +
    ggtitle(label = object_name) +
    scale_fill_viridis(option = &amp;quot;B&amp;quot;, limits = c(50, 100)) +
    theme_void() +
    theme(
      plot.title = element_text(hjust = 0.5)
    )
}

p_orig &amp;lt;- plot_my_gstat_output(grd_100_rstr, &amp;quot;Original Raster&amp;quot;)
p_idw &amp;lt;- plot_my_gstat_output(raster(idwres), &amp;quot;IDW&amp;quot;)
p_SK &amp;lt;- plot_my_gstat_output(raster(SK), &amp;quot;Simple Kriging&amp;quot;)
p_OK &amp;lt;- plot_my_gstat_output(raster(OK), &amp;quot;Ordinary Kriging&amp;quot;)
p_UK &amp;lt;- plot_my_gstat_output(raster(UK), &amp;quot;Universal Kriging&amp;quot;)

# I also want to display sampling locations
p_wellobs &amp;lt;- ggplot(
  data = wellobs,
  mapping = aes(x = X, y = Y, color = Z)
) +
  geom_point(size = 3) + 
  scale_color_viridis(option = &amp;quot;B&amp;quot;,  limits = c(50, 100)) +
  ggtitle(label = &amp;quot;Observation Wells Sampled&amp;quot;) +
  theme_void() +
    theme(
      plot.title = element_text(hjust = 0.5)
    )

# This works because of library(patchwork)
(p_orig + p_wellobs + p_idw) / 
  (p_SK + p_OK + p_UK) + 
  plot_layout(guides = &amp;#39;collect&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-09-10-kriging_with_R/2020-09-09-kriging-with-r-exploring-gstat_files/figure-html/PlotMiscSetup-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;From the plot alone it is not obvious that the different Kriging methods did actually produce different results. We can, however, take a look at the summary statistics and we will see that the three different approaches did indeed yield (subtly) different results.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;map(list(SK, OK, UK), raster) %&amp;gt;% 
  map(summary) %&amp;gt;%
  do.call(&amp;quot;cbind&amp;quot;, .) %&amp;gt;% 
  as.data.frame() %&amp;gt;% 
  setNames(c(&amp;quot;SK&amp;quot;, &amp;quot;OK&amp;quot;, &amp;quot;UK&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##               SK       OK       UK
## Min.    54.39102 54.32669 54.32087
## 1st Qu. 68.90548 68.89596 68.90859
## Median  73.02403 73.00607 73.01139
## 3rd Qu. 78.59243 78.57769 78.57435
## Max.    97.83050 97.83246 97.83256
## NA&amp;#39;s     0.00000  0.00000  0.00000&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Anyway, this is how you can make Kriging in &lt;code&gt;gstat&lt;/code&gt; work for any dataset. If you have a nice example to show where the three different Kriging approaches yield visibly different results, please feel free to contact me (you could &lt;a href=&#34;https://twitter.com/SorenWilke&#34;&gt;write me a Twitter DM&lt;/a&gt;) - I’d love to see that.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Ionic Charge Balance - a functional approach</title>
      <link>/post/icbe/</link>
      <pubDate>Sat, 11 Jul 2020 00:00:00 +0000</pubDate>
      <guid>/post/icbe/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/kePrint/kePrint.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;When working with water chemistry you are often presented with analytic results either send to you by a lab or probably even measured by yourself. From that analysis (usually from several) you are then supposed to draw insight about what is going on in your river/pond/aquifer. In order to be able to do that, it is mandatory that you can rely on your data. After all, any conclusion drawn from a dataset can never be better than the data itself.&lt;/p&gt;
&lt;p&gt;In water chemistry, it is a good custom to check the plausibility of incoming analyses and one fundamental tool to do that is the determination of the ionic charge balance error (ICBE). In Germany, where I happen to live and work, the ICBE, by convention apparently stemming from “Deutscher Verband für Wasserwirtschaft und Kulturbau e.V. (DVWA) Heft 128/92” (though nobody seems to be able to dig up the original reference any more), is calculated using the following formula:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;formula_ger.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;That formula comes with a convention on how to interpret the results:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if the sum of anions and cations both are &amp;lt;= 2 meq/l, an ICBE &amp;lt;= 5% is acceptable&lt;/li&gt;
&lt;li&gt;if that sum is higher for either cations or anions, an ICBE &amp;lt;= 2% is acceptable&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It is worth mentioning that Germany has since 1992 followed kind of their own path on this. The international standard formula comes without the factor “0.5” in the denominator. I don’t know whether the same limits on what an acceptable charge balance error is apply.&lt;/p&gt;
&lt;p&gt;Anyway, the formula to calculate the ICBE looks straightforward enough, so it should be no problem to apply it to your water data, right? Alas, there are again a couple of catches. I already mentioned, that one might have to modify the formula, depending on whether you work in a German or an international setting. Also, sometimes you might need to know the exact ICBE, while on other occasions it would be more handy to just get a quick feedback on whether your analysis passes the test or not. Luckily, the &lt;a href=&#34;https://www.r-project.org/&#34;&gt;R&lt;/a&gt; functional approach to programming allows us to tackle all this disambiguity with reusable and flexible code snippets.&lt;/p&gt;
&lt;p&gt;Lastly, for people new to water chemistry (and we all have at some point been there), getting your analysis into that formula can be challenging itself. What is an anion, what is a cation? And which anions and cations do I need to have measured to make a meaningful ICBE?. What does that strange unit meq/l refer to? I would like to discuss these issues at length here, too, as many explanations on the topic I found online again seemed to cover only parts of the whole story.&lt;/p&gt;
&lt;p&gt;Let’s start by getting us some water analyses!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)     # Data wrangling and plotting
library(PeriodicTable) # Look up element properties
library(kableExtra)    # Table output formatting

# You can download the dataset for this tutorial from Github.
# It is a random sample of 100 Groundwater measurements
# made in the German state of North Rhine-Westphalia in 2018.

# The original dataset is published under the following licence:
# Datenlizenz Deutschland 2.0
# https://www.govdata.de/dl-de/by-2-0
# OpenHygrisC_gw-messstellen-messwerte_EPSG25832_CSV.zip
# https://www.opengeodata.nrw.de/produkte/umwelt_klima/wasser/hygrisc/

raw &amp;lt;- read_csv(
  &amp;quot;https://raw.githubusercontent.com/Ignimbrit/exchange/master/data/2020/HygrisC_GWsample.csv&amp;quot;
  ) %&amp;gt;% 
  select(-Lizenz)

# All Concentrations in `raw` are given in mg/l
kable(raw) %&amp;gt;% 
  kable_styling() %&amp;gt;% 
  scroll_box(width = &amp;quot;700px&amp;quot;, height = &amp;quot;400px&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div style=&#34;border: 1px solid #ddd; padding: 0px; overflow-y: scroll; height:400px; overflow-x: scroll; width:700px; &#34;&gt;
&lt;table class=&#34;table&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:right;position: sticky; top:0; background-color: #FFFFFF;&#34;&gt;
well_no
&lt;/th&gt;
&lt;th style=&#34;text-align:left;position: sticky; top:0; background-color: #FFFFFF;&#34;&gt;
date
&lt;/th&gt;
&lt;th style=&#34;text-align:right;position: sticky; top:0; background-color: #FFFFFF;&#34;&gt;
Na
&lt;/th&gt;
&lt;th style=&#34;text-align:right;position: sticky; top:0; background-color: #FFFFFF;&#34;&gt;
K
&lt;/th&gt;
&lt;th style=&#34;text-align:right;position: sticky; top:0; background-color: #FFFFFF;&#34;&gt;
Mg
&lt;/th&gt;
&lt;th style=&#34;text-align:right;position: sticky; top:0; background-color: #FFFFFF;&#34;&gt;
Ca
&lt;/th&gt;
&lt;th style=&#34;text-align:right;position: sticky; top:0; background-color: #FFFFFF;&#34;&gt;
Mn
&lt;/th&gt;
&lt;th style=&#34;text-align:right;position: sticky; top:0; background-color: #FFFFFF;&#34;&gt;
Fe
&lt;/th&gt;
&lt;th style=&#34;text-align:right;position: sticky; top:0; background-color: #FFFFFF;&#34;&gt;
HCO3
&lt;/th&gt;
&lt;th style=&#34;text-align:right;position: sticky; top:0; background-color: #FFFFFF;&#34;&gt;
NO3
&lt;/th&gt;
&lt;th style=&#34;text-align:right;position: sticky; top:0; background-color: #FFFFFF;&#34;&gt;
NH4
&lt;/th&gt;
&lt;th style=&#34;text-align:right;position: sticky; top:0; background-color: #FFFFFF;&#34;&gt;
PO4
&lt;/th&gt;
&lt;th style=&#34;text-align:right;position: sticky; top:0; background-color: #FFFFFF;&#34;&gt;
SO4
&lt;/th&gt;
&lt;th style=&#34;text-align:right;position: sticky; top:0; background-color: #FFFFFF;&#34;&gt;
Cl
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
73564217
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-08-15
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
42.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.30
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
20.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
160.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
406.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
27.00470
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06440
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
110.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
81.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
100150287
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-09-24
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
26.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.40
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
13.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
120.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.3000
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
16.000
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
272.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.32810
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.86400
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
82.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
52.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
80302555
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-09-03
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
14.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
22.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
14.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
72.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.3100
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.035
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
16.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
146.09100
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06440
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.04000
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
110.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
32.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
80302180
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-06-22
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
17.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.40
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
29.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.2000
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.180
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
42.49920
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06440
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
60.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
32.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
110250035
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-08-08
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
54.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.50
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
200.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0250
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.024
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
460.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.32810
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06440
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06462
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
120.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
91.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
99580020
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-04-25
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.10
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
91.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0066
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.025
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
221.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.85400
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06440
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.04616
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
49.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.3
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10407194
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-07-10
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.77
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0068
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
12.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.29670
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06440
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.9
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
129660255
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-06-11
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.66
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
30.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.64050
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06440
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03692
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
110040260
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-05-29
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.90
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
14.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
130.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0500
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.300
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
383.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.32810
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.15456
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
20.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
21.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
59540515
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-07-04
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
31.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.40
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
13.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
53.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0022
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
128.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.12496
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.15456
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.08923
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
68.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
45.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
289194611
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-03-14
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
55.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.10
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
18.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
85.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0060
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.030
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
255.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
31.00002
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.09985
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06154
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
97.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
63.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
70284118
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-06-13
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.20
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
43.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.098
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
112.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
13.28100
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06440
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.11077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
54.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
33.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
80200758
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-09-13
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
15.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.90
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
31.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0340
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
14.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
57.55100
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.30912
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03692
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
57.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
25.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
70276110
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-04-11
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
340.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
18.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
39.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
100.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0420
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
744.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
16.82260
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.10304
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.33847
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
140.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
290.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
76866713
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-09-20
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
48.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.10
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
190.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
530.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11.06750
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06440
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.04000
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
70.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
97.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
110210086
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-09-04
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
52.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.70
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
130.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0940
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.360
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
412.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.32810
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.20608
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
43.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
66.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
110070173
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-04-11
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
14.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.70
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
33.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.3000
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
62.000
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
101.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.32810
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.19320
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
86.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
26.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
59540837
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-02-13
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
140.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.80
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
42.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
306.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
16.82260
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06440
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
64.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
85.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
73727088
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-02-23
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0036
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
34.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.73940
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06440
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
22.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.8
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10409087
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-06-20
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.10
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
37.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
86.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.1200
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
334.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
23.02040
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06440
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
30.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
18.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
110250126
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-08-09
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
24.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.70
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
20.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
180.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0240
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.240
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
458.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.32810
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.18032
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
92.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
91.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
110220894
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-07-16
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.80
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
98.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0390
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.040
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
184.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.59372
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06440
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
71.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
46.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
21000086
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-05-15
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
30.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.50
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
95.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.3500
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.800
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
194.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.32810
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.64400
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
76.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
50.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
100702119
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-10-24
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
18.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.20
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
130.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0200
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.040
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
272.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
28.00002
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.09985
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.04015
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
85.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
41.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
98120402
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-09-06
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
13.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.40
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
27.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
140.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.1100
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.400
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
539.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.32810
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.18240
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.04616
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
219480618
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-05-17
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
44.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.60
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
18.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
146.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0050
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.010
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
162.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
65.00000
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.09985
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06154
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
140.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
149.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
100706940
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-04-12
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
26.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
18.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
216.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.4800
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.410
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
456.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.99999
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.29954
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.79282
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
240.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
33.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
94120341
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-04-26
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.10
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
160.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0098
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
340.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
35.41600
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.09016
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
57.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
32.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
94140273
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-04-25
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
12.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.50
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
23.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.1200
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.028
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
59.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.37237
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06440
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
33.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
18.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
73561915
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-07-31
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
28.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.70
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
20.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
150.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
363.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
34.53060
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06440
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
100.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
53.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
100750059
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-04-16
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
75.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
13.50
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
110.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0100
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.010
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
264.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
18.00000
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.09985
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.20071
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
91.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
210.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
76811311
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-06-25
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
21.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.60
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
23.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
79.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
12.83830
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06440
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
21.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
26.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
110060106
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-08-27
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
16.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
14.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
42.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0320
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
39.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
66.40500
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06440
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06462
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
35.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
26531124
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-05-24
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
12.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
29.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
120.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0680
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.040
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
288.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
48.69700
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06440
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
52.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
20.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
110200214
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-07-10
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
29.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
37.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0940
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.310
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
29.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
31.87440
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.30912
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
64.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
56.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
26540216
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-05-15
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
82.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.20
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
120.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.1700
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.700
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
347.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.32810
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.56672
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03385
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
120.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
129660188
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-06-27
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
12.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.83
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
120.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.036
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
345.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
30.10360
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06440
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
17.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
29.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
26504595
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-10-23
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.40
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
26.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
103.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0100
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.010
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
316.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
33.00001
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.09985
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.04015
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
58.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
20.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10203199
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-05-23
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
24.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.20
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
83.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
203.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
44.27000
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06440
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.08308
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
50.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
41.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
26500012
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-01-25
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.20
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
130.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0070
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
271.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
14.60910
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06440
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.1
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
80303328
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-06-29
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
22.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
12.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
14.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
130.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.0000
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.041
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
356.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.75510
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.29624
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
65.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
37.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
21150023
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-05-24
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.87
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
100.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.3800
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.600
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
215.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.32810
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.27048
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
44.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
33.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
59130441
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-07-25
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
26.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
76.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
20.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
170.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
513.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
41.17110
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06440
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.28308
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
130.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
37.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
279481317
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-08-27
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
51.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.40
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
25.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
191.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0050
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.040
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
327.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
72.99999
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.09985
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.09231
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
127.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
161.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10301574
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-08-27
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
22.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.40
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
65.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0021
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.039
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
100.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
29.21820
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06440
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
93.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
36.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
106530033
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-05-28
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
16.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.60
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
150.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0084
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.180
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
293.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
88.54000
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06440
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
68.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
28.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
100700536
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-04-26
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
16.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.40
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
34.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.4400
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
33.100
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
65.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.99999
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.54915
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.91685
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
66.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
53.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
106530021
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-05-28
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
29.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.70
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
150.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0110
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.420
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
322.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
123.95600
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06440
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
46.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
36.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
70134212
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-09-13
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
77.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.90
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
29.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
98.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.091
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
325.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
27.44740
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06440
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06769
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
99.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
100.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
106502062
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-04-18
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.10
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
36.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0500
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.600
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
105.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.00002
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.09985
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.04015
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
20.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
13.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
91112000
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-09-06
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
18.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.80
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
18.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
130.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.1600
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.300
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
367.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.32810
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.05616
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
92.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
29.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
100761161
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-03-22
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
13.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.60
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
14.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
128.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0300
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.030
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
380.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
16.00002
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.09985
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.04015
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
59.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
18.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10410053
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-10-25
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.55
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
44.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
80.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
380.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
28.33280
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06440
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
23.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
73311716
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-07-26
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
23.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.30
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
21.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
130.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
352.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
26.11930
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06440
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
100.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
46.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
73512618
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-08-08
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
45.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.30
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
23.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
170.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.035
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
383.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
53.12400
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06440
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
150.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
59.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
110200354
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-07-02
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
130.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.4000
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
12.000
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
346.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.32810
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.83720
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
52.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
20.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
60220855
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-05-16
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
320.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
21.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
16.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0034
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.260
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
677.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.32810
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.87584
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03385
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
93.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
150.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
16003998
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-01-30
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.10
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
180.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
371.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
20.36420
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06440
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.15077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
59.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
21.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
110200445
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-06-21
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
27.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
12.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
29.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
130.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.2900
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.037
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
294.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.32810
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06440
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
120.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
86.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
91140602
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-07-16
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
15.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
22.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
190.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.2700
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.410
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
523.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.02857
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06440
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
40.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
56.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
26540514
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-05-23
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.30
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
85.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0150
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
128.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
88.54000
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06440
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
27.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
13.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
113109477
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-10-16
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
16.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
13.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
130.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0590
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.510
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
281.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.32810
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06440
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
110.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
31.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10202201
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-03-15
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
40.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.70
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
36.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0160
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.330
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
77.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
21.24960
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06440
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
84.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
36.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
26541117
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-05-17
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
15.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
75.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.1700
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.800
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
116.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
43.82730
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06440
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
62.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
27.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
70200518
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-07-02
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
20.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.40
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
59.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
170.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.64050
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06440
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
27.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
29.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
100706680
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-04-12
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
61.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.80
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
16.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
162.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.1500
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.310
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
354.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
16.99999
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.09985
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.04015
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
135.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
119.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10201117
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-03-15
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
22.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
21.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
150.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
265.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
61.97800
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06440
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.04616
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
130.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
66.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
110151094
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-09-26
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
39.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.10
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
15.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
130.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.1400
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.071
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
363.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.32810
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.69552
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
29.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
76.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
110060179
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-09-03
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
81.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
12.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
120.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0027
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
287.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
41.17110
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06440
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
72.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
96.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10410077
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-07-03
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
220.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.90
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
22.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
65.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.5000
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
811.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.32810
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.23184
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
12.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
110200251
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-07-03
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.70
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
53.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0210
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.036
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
26.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
61.97800
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06440
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
70.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
99780082
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-08-01
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
18.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.10
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
59.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.025
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
133.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11.06750
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06440
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
54.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
30.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
26541154
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-05-17
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
15.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
97.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.8200
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.066
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
225.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
23.02040
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06440
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
55.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
40304024
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-06-20
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
16.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.20
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
70.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
48.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
97.39400
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06440
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.36924
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
99.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
33.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
100706617
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-11-21
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.90
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
135.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.7400
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.800
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
319.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.00002
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.17971
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.22077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
101.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
41.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
100140920
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-06-26
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
18.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
220.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.2400
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.100
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
300.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.32810
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.20608
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
110.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
35.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
70156116
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-10-19
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
51.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.80
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
34.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
120.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.4500
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.400
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
269.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.81507
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.20608
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
250.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
49.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
219971614
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-08-07
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
21.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.83
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
23.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
173.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0050
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.010
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
346.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
77.00001
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.09985
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06154
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
111.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
85.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
106506043
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-04-04
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.9
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
29.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
65.1
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0100
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.010
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
244.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10.99999
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.09985
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.04015
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
79.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
100140750
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-10-18
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
100.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.20
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
160.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.1000
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
18.000
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
274.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.32810
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.29624
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
88.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
290.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
70157110
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-10-11
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
57.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.40
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
22.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
130.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
361.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
23.46310
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06440
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
120.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
83.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
91153300
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-07-31
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
13.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
14.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
190.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0760
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
464.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.19780
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06440
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.93871
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
40.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
26.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
26490997
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-03-14
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
23.2
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
4.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
116.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.2670
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.630
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
231.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
27.60000
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.13979
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03009
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
65.8
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
52.5
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
94190173
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-05-17
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
13.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.40
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
16.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
160.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
292.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
37.62950
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06440
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.04616
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
180.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
26.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
59130726
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-08-06
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
23.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.40
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
140.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.7000
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.300
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
422.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.32810
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.14632
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
76.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
28.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
59620213
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-06-04
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.95
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
61.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
158.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
15.05180
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06440
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
40.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.6
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
80303237
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-07-09
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
5.50
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
86.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0044
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.040
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
183.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
53.12400
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06440
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.08616
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
62.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
16.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10201415
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-05-07
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
21.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.20
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
17.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
129.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0050
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.040
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
230.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
92.00001
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.09985
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.12308
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
97.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
50.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
59621280
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-10-16
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
55.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
2.40
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
150.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0200
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
242.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
15.05180
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06440
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
150.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
130.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
110240133
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-05-30
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.50
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
68.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0170
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.029
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
173.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10.62480
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.27048
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.11385
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
17.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.5
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
26503153
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-03-15
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.50
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
38.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
132.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0100
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.010
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
368.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
22.00002
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.09985
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.04015
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
163.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
16.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
20103074
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-12-17
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
36.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
97.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
83.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.6600
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.100
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
223.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
27.45000
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.50000
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.71000
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
130.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
66.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
73746710
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-06-20
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
51.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.90
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
21.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
100.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
316.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
23.02040
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06440
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
68.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
78.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
80303183
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-11-06
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
21.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.40
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
12.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
90.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.020
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
63.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
106.24800
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06440
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.09846
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
110.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
48.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
110050010
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-07-11
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
34.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
9.60
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
69.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0240
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.400
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
64.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.32810
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.19320
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.04923
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
130.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
50.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
59130570
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-07-23
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
100.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.80
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
28.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
120.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0090
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.500
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
640.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.32810
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
3.22000
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
47.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
44.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
106502463
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-04-25
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.80
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
23.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
51.3
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0100
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.010
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
171.4
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
22.00002
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.09985
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.04015
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
62.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
16.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
106506031
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-10-18
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
11.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.90
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
28.7
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
63.5
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0100
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.010
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
277.6
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
13.00002
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.09985
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.04015
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
52.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
24.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
110070057
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-08-06
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
13.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
16.00
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
6.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
71.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0021
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.051
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
90.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
119.52900
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06440
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.38465
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
43.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
19.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
76809407
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
2018-02-26
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
21.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
1.10
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
10.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
47.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.0049
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.048
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
97.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
7.96860
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.06440
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
0.03077
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
8.0
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
82.0
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;&lt;b&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;In its current form, that table is not easy to work with in R. We need a simple way to apply transformations to all measurements at once. It is therefore better to organize the data in columns, so we can readily push them into tidyverse functions. Also we need to know which elements we actually deal with.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_base &amp;lt;- raw %&amp;gt;% 
  pivot_longer(Na:Cl, names_to = &amp;quot;Param&amp;quot;, values_to = &amp;quot;mg/l&amp;quot;)

# Check which ions were analyzed in the dataset
df_base$Param %&amp;gt;% unique() %&amp;gt;% paste0(collapse = &amp;quot;, &amp;quot;) %&amp;gt;% cat()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Na, K, Mg, Ca, Mn, Fe, HCO3, NO3, NH4, PO4, SO4, Cl&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So we have actually quite a broad inventory of elements and molecules here. All of those can, and if they are available they should, go into your ICBE calculation. However, in many contexts it might already be possible to obtain good results when only Na, K, Mg, Ca, HCO3, SO4 &amp;amp; Cl are available, as they often constitute the bulk of dissolved ions in natural waters.&lt;/p&gt;
&lt;p&gt;In order to derive gainful insight about our measurements of those parameters, though, we need to have additional knowledge about their chemical properties.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# The mass of an ion can be acquired from {PeriodicTable} function `mass`
# The charge, unfortunately, you *have to know*. Explaining this basic concept
# of aqueous chemistry is a bit beyond the scope of this blog post.
df_specs &amp;lt;- tribble(
  ~Param, ~charge, ~`mass [g/mole]`,
    &amp;quot;Na&amp;quot;,      1L,   mass(&amp;quot;Na&amp;quot;),
     &amp;quot;K&amp;quot;,      1L,   mass(&amp;quot;K&amp;quot;),
    &amp;quot;Mg&amp;quot;,      2L,   mass(&amp;quot;Mg&amp;quot;),
    &amp;quot;Ca&amp;quot;,      2L,   mass(&amp;quot;Ca&amp;quot;),
    &amp;quot;Mn&amp;quot;,      2L,   mass(&amp;quot;Mn&amp;quot;),
    &amp;quot;Fe&amp;quot;,      2L,   mass(&amp;quot;Fe&amp;quot;),
  &amp;quot;HCO3&amp;quot;,     -1L,   mass(&amp;quot;H&amp;quot;) + 1*mass(&amp;quot;C&amp;quot;) + 3*mass(&amp;quot;O&amp;quot;),
   &amp;quot;NO3&amp;quot;,     -1L,   mass(&amp;quot;N&amp;quot;) + 3*mass(&amp;quot;O&amp;quot;),
   &amp;quot;NH4&amp;quot;,      1L,   mass(&amp;quot;N&amp;quot;) + 4*mass(&amp;quot;H&amp;quot;),
   &amp;quot;PO4&amp;quot;,     -3L,   mass(&amp;quot;P&amp;quot;) + 4*mass(&amp;quot;O&amp;quot;),
   &amp;quot;SO4&amp;quot;,     -2L,   mass(&amp;quot;S&amp;quot;) + 4*mass(&amp;quot;O&amp;quot;),
    &amp;quot;Cl&amp;quot;,     -1L,   mass(&amp;quot;Cl&amp;quot;)
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we do have our analyses and know the properties of the ions we are dealing with, we can transform the concentrations that we’ve been given in mg/l (milligram per liter) into meq/l (millimole equivalent per liter), the unit that goes into the ICBE formula. mg/l refers to the mass of a substance (e.g. chloride) solved in a liquid (water, in this case). That much is easy to understand. But what is mole and what does mole equivalent mean?.&lt;/p&gt;
&lt;p&gt;While the unit mg (1/1000 g) refers to the mass of the substance, mole refers to its amount, the very number of atomic particles of a certain kind. As different kinds of particles, say Na and Cl, have different masses, weighing in the same amount of Na and Cl with a balance will provide you with a different number of particles. One mole is short hand for 6.02214076×10^23 particles, just like a dozen is short hand for 12.&lt;/p&gt;
&lt;p&gt;To go from a mass in g to an amount of particles in mole you need to know the molar mass of an element or molecule. The molar mass for every element can be read from any decent &lt;a href=&#34;https://en.wikipedia.org/wiki/Periodic_table&#34;&gt;periodic table&lt;/a&gt; or called in R directly with &lt;code&gt;PeriodicTable::mass()&lt;/code&gt;. It comes in g/mole, so if you divide your substance mass in g by the element’s molar mass, the g will cancel out and you end up with your substance amount in mole.&lt;/p&gt;
&lt;p&gt;Why is it important to know how many particles exactly you have? Because as we are dealing with ions here, every particle comes with a charge and we need to add up those numbers. And this is where the transition from “mole” to “mole equivalent” comes in. All ions are charged. But some ions are more charged than others. As we are trying to ultimately calculate a charge balance here, we will eventually have to multiply the amount of particles we have with the amount of charge that is assigned to the individual particles.&lt;/p&gt;
&lt;p&gt;That was a lot of text that probably simultaneously bored the people with a chemical background and confused those without. Therefore now let’s jump back to the code and look at how to actually perform the described unit conversion.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_mole &amp;lt;- df_base %&amp;gt;% 
  left_join( # First I&amp;#39;ll attach the ion properties to my concentrations
    df_specs, by = &amp;quot;Param&amp;quot;
  ) %&amp;gt;% 
  mutate(    # Next let&amp;#39;s add a column specifying whether charge is + or -
    iontype = case_when(
      charge &amp;gt; 0 ~ &amp;quot;Cation&amp;quot;,
      charge &amp;lt; 0 ~ &amp;quot;Anion&amp;quot;
    )
  ) %&amp;gt;% 
  mutate(    # Here is the actual unit conversion, as explicit as possible
    `g/l`     = `mg/l`    / 1000,
    `mole/l`  = `g/l`     / `mass [g/mole]`,
    `mmole/l` = `mole/l`  * 1000,
    `meq/l`   = `mmole/l` * abs(charge) # number of particle times their charge
  )

# Now that we have the correct unit, all we need to do is sum up
# our anions and cations.
df_Ionsum &amp;lt;- df_mole %&amp;gt;% 
  group_by(well_no, date, iontype) %&amp;gt;% 
  summarise(ionsum = sum(`meq/l`)) %&amp;gt;% 
  ungroup() %&amp;gt;% 
  pivot_wider(names_from = iontype, values_from = ionsum)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With our analytic data in the right shape and unit, we can go ahead and write a function that takes the sum of anions and cations and calculates the ICBE.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ionic_charge_error &amp;lt;- function(
  sum_cations, sum_anions, 
  absolute = TRUE,         # differentiate between positive &amp;amp; negative error?
  mode = &amp;quot;GER&amp;quot;,            # which calculation scheme to use?
  logical = FALSE,         # return only whether test was passed?
  discard_threshold = &amp;quot;default&amp;quot;  # How much error is too much?
){
  
  # Should the result be a positive number only (the default)?
  if(absolute == TRUE){
    numerator &amp;lt;- abs(sum_cations-sum_anions)
  } else {
    numerator &amp;lt;- sum_cations-sum_anions
  }
  
  # Use the deviant German calculation scheme?
  if(mode == &amp;quot;GER&amp;quot;){
    denominator &amp;lt;- (sum_cations+sum_anions)*0.5
  } else if(mode == &amp;quot;INT&amp;quot;){
    denominator &amp;lt;- (sum_cations+sum_anions)
  } else {
    stop(&amp;quot;mode not supported&amp;quot;)
  }
  
  # Calculate the actual charge balance
  ionic_charge_error &amp;lt;- numerator/denominator*100
  
  # Sometimes you do only care whether the charge error is acceptable or not
  if(logical == TRUE){
    
    if(discard_threshold == &amp;quot;default&amp;quot;){
      # This is another (probably German?) convention
      if(any(c(sum_anions, sum_cations) &amp;gt; 2)){limit &amp;lt;- 2L} else {limit &amp;lt;- 5L}
    } else {
      # Alternatively, You can just supply your own, personal threshold
      limit &amp;lt;- discard_threshold
    }
    
    if(ionic_charge_error &amp;gt; limit){
      FALSE
    } else {
      TRUE
    }
  } else {
    ionic_charge_error
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, an R function allows a lot of flexibility for advanced users while, by setting reasonable defaults, still remains easily applicable even for people not familiar with every detail of the underlying concept.&lt;/p&gt;
&lt;p&gt;Finally, we can now have a look at the quality of those water analyses I dug up.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_icbe &amp;lt;- df_Ionsum %&amp;gt;% 
  mutate( # I&amp;#39;ll try both modes of the function: numeric and logical
    charge_error = map2_dbl(Cation, Anion, ionic_charge_error),
    keep = map2_lgl(Cation, Anion, ionic_charge_error, logical = TRUE)
  )

# The result is a large data.frame with lot&amp;#39;s of values.  
# To get a better understanding of the results, a plot can help.

ggplot(
  data = df_icbe %&amp;gt;% 
    mutate(
      `acceptable error` = map2_chr(
        Anion, Cation, function(x, y){
          if(any(c(x, y) &amp;gt; 2)){&amp;quot;2%&amp;quot;} else {&amp;quot;5%&amp;quot;}
        }
      ) 
    ),
  mapping = aes(
    x = charge_error,
    fill = `acceptable error`
  )
) +
  geom_histogram(
    binwidth = 1, color = &amp;quot;black&amp;quot;, boundary = 0
  ) +
  geom_vline(
    aes(
      xintercept = parse_number(`acceptable error`),
      color = `acceptable error`
      ),
    size = 2
    ) +
  scale_fill_manual(values = c(&amp;quot;firebrick&amp;quot;, &amp;quot;steelblue&amp;quot;)) +
  scale_color_manual(values = c(&amp;quot;red&amp;quot;, &amp;quot;blue&amp;quot;)) +
  scale_x_continuous(breaks = seq(0, 50, 2)) +
  scale_y_continuous(breaks = seq(0, 20, 2)) +
  labs(
    title = &amp;quot;Calculated Ionic Charge Balance Error&amp;quot;,
    subtitle = &amp;quot;100 groundwater samples collected 2018 in North Rhine-Westphalia, Germany&amp;quot;,
    x = &amp;quot;charge balance error in percent&amp;quot;
  ) +
  theme_bw() +
  theme(
    axis.text = element_text(size = 11, color = &amp;quot;black&amp;quot;),
    axis.title = element_text(size = 12, color = &amp;quot;black&amp;quot;),
    legend.text = element_text(size = 11, color = &amp;quot;black&amp;quot;),
    legend.title = element_text(size = 12, color = &amp;quot;black&amp;quot;),
    legend.position = &amp;quot;bottom&amp;quot;,
    legend.direction = &amp;quot;horizontal&amp;quot;
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-07-11-IONcharge/index_files/figure-html/demonstration-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;As you can see, the vast majority of analyzed samples (97 in 100) come with a rather high mineralization, leading to either cationsum or anionsum being &amp;gt; 2 meq/l. Only 28 out of 100 samples end up having an acceptable charge balance. Reasons for this can be manifold and range from bad sampling over laboratory issues to the presence of organic contaminants that might skew your charge balance. Either way, if your dataset has a charge balance rate that looks like the one in the histogram above, you should probably talk to your sampler.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A practical guide to geospatial interpolation with R</title>
      <link>/post/spatial_interpolation/</link>
      <pubDate>Thu, 21 May 2020 00:00:00 +0000</pubDate>
      <guid>/post/spatial_interpolation/</guid>
      <description>


&lt;p&gt;One of the most exciting things you can do with R is geospatial interpolation. This means that you have some kind of information (e.g. measurements of, say, soil temperature) for a limited number of locations and then you apply a mathematical model that will provide you with an educated guess of what your result might look like, if you would have measured at every possible location. The practical advantage is clear. Sampling is expensive and therefore always limited. This is especially true in the geosciences, where sampling might require hundreds of thousands of Euros for drilling deep holes to the formation of your interest.&lt;/p&gt;
&lt;p&gt;Doing your geospatial interpolation in R is a great opportunity. Many software tools often associated with that task are commercial products that can become fairly expensive, so it is pretty common that if one finishes university or changes a job position, all the work spend on learning that tool is rendered void. R on the other hand is always free and offers a wide range of algorithms of all kinds of flavors. An additional bonus is the seamless integration with the powerful data transformation and visualization capabilities of the language.&lt;/p&gt;
&lt;p&gt;A problem when using R (especially at the beginning) is, that the user interface for the application of different algorithms on the many available data structures varies wildly. Although improvements clearly have been made in the recent years, there is little standardization and every package author basically comes up with their own philosophy on how to handle input/output.&lt;/p&gt;
&lt;p&gt;As a consequence, starting with geospatial interpolation in R can be frustrating. Of course you can (and will have to) dig through the documentation of the various packages, but as interpolation models are a fairly advanced topic of statistics, those tend to be heavy on technical slang.&lt;/p&gt;
&lt;p&gt;There are a couple of good blog posts (see &lt;a href=&#34;https://rpubs.com/nabilabd/118172&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;https://rspatial.org/raster/analysis/4-interpolation.html&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://fishandwhistle.net/post/2019/bathymetry-lake-volume-estimation-using-r/&#34;&gt;here&lt;/a&gt;) on geospatial interpolation, but they either focus on dealing with specific package interfaces or are again written for an audience that is already well versed in the world of spatial data.&lt;/p&gt;
&lt;p&gt;When I started to learn about geospatial interpolation with R a couple of years ago, I found it difficult to get up to speed with real world data. Most use cases I found focus on pre-treated datasets whose conditions I could not sensibly reproduce with my own data or made steps that seemed outright incomprehensible at that time. So I feel like there is a documentation gap for a practical guide on the very basics of geospatial interpolation: how do I get from having a bunch of field observations to a regular raster of interpolated values that I can plot on a nice little map? I am going to present here a minimalistic workflow designed to step-by-step explain the principles behind the necessary operations, that all approaches for geospatial interpolation with R have in common. That way I hope your entrance into this fascinating world will be more pleasant than mine was.&lt;/p&gt;
&lt;p&gt;There are four steps to Geospatial interpolation&lt;/p&gt;
&lt;ol start=&#34;0&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Have some data&lt;/li&gt;
&lt;li&gt;Create a grid template&lt;/li&gt;
&lt;li&gt;Fit a model&lt;/li&gt;
&lt;li&gt;Interpolate!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So let’s start!&lt;/p&gt;
&lt;div id=&#34;step-0-have-some-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Step 0: Have some data&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# We will need some packages for (spatial) data processing
library(tidyverse) # wrangling tabular data and plotting
library(sf) # processing spatial vector data
library(sp) # another vector data package necessary for continuity
library(raster) # processing spatial raster data. !!!overwrites dplyr::select!!!

# And a lot of different packages to test their interpolation functions
library(gstat)  # inverse distance weighted, Kriging
library(fields) # Thin Plate Spline
library(interp) # Triangulation
library(mgcv)   # Spatial GAM
library(automap)# Automatic approach to Kriging

# Finally, some packages to make pretty plots
library(patchwork)
library(viridis)

# Download the data for this tutorial from Github
# Data is provided by the senate of the city of Berlin under:
# dl-de/by-2-0 Umweltatlas Berlin / Grundwassergüte Ammonium (Umweltatlas)
# for more details see: http://www.stadtentwicklung.berlin.de/umwelt/umweltatlas/ia204.htm

pts_NH4 &amp;lt;- readr::read_csv(
  &amp;quot;https://raw.githubusercontent.com/Ignimbrit/exchange/master/data/2020/Ammonium_Hoppegarten.csv&amp;quot;,
  col_types = cols(NH4 = col_double(), 
                   X = col_double(), Y = col_double(), 
                   fid = col_character(), licence = col_character())
  ) %&amp;gt;% 
  dplyr::select(X, Y, NH4)

print(pts_NH4)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 64 x 3
##          X        Y   NH4
##      &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1 406521. 5814334.   2.3
##  2 409320. 5814598.  20.2
##  3 410322. 5814606.   0.3
##  4 408804. 5814825.   4.1
##  5 409049. 5814830.   2.5
##  6 408701. 5814896.  11.3
##  7 408843. 5814898.  16.1
##  8 409022. 5814928.   3  
##  9 408865. 5814943.  12  
## 10 408729. 5814949.  24.4
## # ... with 54 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the chunk above we already solved Step 0: Have some data! For this tutorial I compiled a little demonstration dataset (see comments for the source) that you can download from github to follow my steps. The data comes from a csv that contains 64 measurements of &lt;a href=&#34;https://en.wikipedia.org/wiki/Ammonium&#34;&gt;Ammonium&lt;/a&gt; (chemical formula NH4+) in groundwater from a former septic drain field (“Rieselfeld”) at a place called Hoppegarten at the outer rim of Berlin. Ammonia in groundwater can be a problem, so it would be good to know exactly how big our problem is, which can hardly be assessed by a couple of randomly scattered points per se.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;point_plot &amp;lt;- ggplot(
  data = pts_NH4,
  mapping = aes(x = X, y = Y, color = NH4)) +
  geom_point(size = 3) +
  scale_color_gradientn(colors = c(&amp;quot;blue&amp;quot;, &amp;quot;yellow&amp;quot;, &amp;quot;red&amp;quot;))

point_plot&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-05-21-guide_to_spatial_interp/index_files/figure-html/pts_plot-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can see from plotting the points alone that there seems to be some spatial dependency on the ammonia concentration. Samples with high concentration seem to be sitting mostly at the center of the plot. This is all we need: a coordinate pair (in this context sometimes referred to as the independent variables) and an associated continuous variable (the corresponding dependent variable). If there is a spatial pattern behind the values of the continuous variable (so that it really is depending on the coordinates specifying its position), geospatial interpolation can work.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;step-1-create-a-grid-template&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Step 1: Create a grid template&lt;/h3&gt;
&lt;p&gt;This is one of the less intuitive steps but a very important one nonetheless. You need to specify were you would like to interpolate (aka generate new information), before you actually have that new information. When learning about geospatial interpolation with R in the first place, this was the step that used to bother me the most. After all: how am I supposed to know where I would like my information, if I do not actually even have it yet?&lt;/p&gt;
&lt;p&gt;I will not dive any further into the whys and hows here. For now just accept that we need a template to later fill with interpolated values, and that creating this template is super easy, so that you should not worry about it. There are a couple of catches, but we will discuss those as we encounter them. Let’s start with a very basic approach to grid template making.&lt;/p&gt;
&lt;div id=&#34;option-a-the-simple-approach&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Option a) The simple approach&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# First let&amp;#39;s define a bounding Box, a rectangle that contains all our data
# points. There are many ways to do this but I am keeping it as simple as
# possible on purpose here
bbox &amp;lt;- c(
  &amp;quot;xmin&amp;quot; = min(pts_NH4$X),
  &amp;quot;ymin&amp;quot; = min(pts_NH4$Y),
  &amp;quot;xmax&amp;quot; = max(pts_NH4$X),
  &amp;quot;ymax&amp;quot; = max(pts_NH4$Y)
)

grd_template &amp;lt;- expand.grid(
  X = seq(from = bbox[&amp;quot;xmin&amp;quot;], to = bbox[&amp;quot;xmax&amp;quot;], by = 20),
  Y = seq(from = bbox[&amp;quot;ymin&amp;quot;], to = bbox[&amp;quot;ymax&amp;quot;], by = 20) # 20 m resolution
)

grid_plot &amp;lt;- ggplot() +
  geom_point(data = grd_template, aes(x = X, y = Y), size = 0.01) +
  geom_point(data = pts_NH4,
  mapping = aes(x = X, y = Y, color = NH4), size = 3) +
  scale_color_gradientn(colors = c(&amp;quot;blue&amp;quot;, &amp;quot;yellow&amp;quot;, &amp;quot;red&amp;quot;)) +
  coord_cartesian( #zooming in so we can actually see something
    xlim = c(408000, 409000), ylim = c(5815000, 5816000)) +
  theme_bw()

grid_plot&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-05-21-guide_to_spatial_interp/index_files/figure-html/simple_gridmaking-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;So this is the most simple approach on making a grid template I could think of. And when I say simple I mean that in an absolute positive way. No dependencies, no domain specific knowledge. It has the advantage of needing no other libraries and producing a &lt;code&gt;data.frame&lt;/code&gt; which is easy to handle.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;option-b-the-classical-approach&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Option b) the classical approach&lt;/h4&gt;
&lt;p&gt;Using &lt;code&gt;base::expand.grid&lt;/code&gt; is not necessarily the best way to build your grid template. Another popular way is to use &lt;code&gt;sf::st_make_grid&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sf_NH4 &amp;lt;- st_as_sf(pts_NH4, coords = c(&amp;quot;X&amp;quot;, &amp;quot;Y&amp;quot;), crs = 25833)

alt_grd_template_sf &amp;lt;- sf_NH4 %&amp;gt;% 
  st_bbox() %&amp;gt;% 
  st_as_sfc() %&amp;gt;% 
  st_make_grid(
  cellsize = c(20, 20),
  what = &amp;quot;centers&amp;quot;
  ) %&amp;gt;%
  st_as_sf() %&amp;gt;%
  cbind(., st_coordinates(.)) %&amp;gt;% 
  st_drop_geometry() %&amp;gt;% 
  mutate(Z = 0)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Those commands will create a fairly similar grid to the one we made above, but there are some differences.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;alt_grd_template_sf&lt;/code&gt; does actually contain all sample points. If you’ve been following my steps closely, you might have noticed, that I made no effort ensuring that when creating &lt;code&gt;grd_template&lt;/code&gt; in my call to &lt;code&gt;expand.grid&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alt_grd_template_sf&lt;/code&gt; was created using functions from the &lt;code&gt;sf&lt;/code&gt; package and comes in a data structure provided by that package (a &lt;code&gt;sfc&lt;/code&gt;, or simple feature column, to be specific). For continuity I converted the object into a &lt;code&gt;data.frame&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;You can probably see that in order to leverage &lt;code&gt;sf::st_make_grid&lt;/code&gt; we have to apply an awful lot of functions and skim through several data types before we actually get to have our “simple” XYZ grid. Coming up with this requires the user to already know a lot about the data classes from the &lt;code&gt;sf&lt;/code&gt; package and their interdependencies.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the long run, if you intend to take a deeper dive into the Rspatial world, I recommend to &lt;a href=&#34;https://geocompr.robinlovelace.net/&#34;&gt;read up about how to use package &lt;code&gt;sf&lt;/code&gt;&lt;/a&gt;. It was specifically build to handle spatial vector data and many interpolation algorithms that are out there are explicitly tailored towards accepting its classes or the closely related structures from the “older-sister-package” &lt;code&gt;sp&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;step-1b-rasterizing-your-grid-template&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Step 1b: Rasterizing your grid template&lt;/h3&gt;
&lt;p&gt;I warned you that this tutorial would have to be a bit convoluted. We have our grid template now and it contains all the information we need. Regardless whether you prefer &lt;code&gt;base::expand.grid&lt;/code&gt; or &lt;code&gt;sf::st_make_grid&lt;/code&gt;, what you get in return is essentially a table of point coordinates.&lt;/p&gt;
&lt;p&gt;For some interpolation algorithms this is just fine as they work well with data.frames. Others don’t. Usually there are ways to make it work but often enough things will get messy. As we want to look at a couple of different interpolation methods from different packages with vastly different interfaces and expectations, we will create a copy of our grid template in a different data structure to make our life a little easier.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# {raster} expects a PROJ.4 string, see https://epsg.io/25833
crs_raster_format &amp;lt;- &amp;quot;+proj=utm +zone=33 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs&amp;quot;

grd_template_raster &amp;lt;- grd_template %&amp;gt;% 
  dplyr::mutate(Z = 0) %&amp;gt;% 
  raster::rasterFromXYZ( 
    crs = crs_raster_format)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in showSRID(uprojargs, format = &amp;quot;PROJ&amp;quot;, multiline = &amp;quot;NO&amp;quot;): Discarded datum Unknown based on GRS80 ellipsoid in CRS definition,
##  but +towgs84= values preserved&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Let&amp;#39;s also carry with us the raster from the alternative approach
alt_grd_template_raster &amp;lt;- alt_grd_template_sf %&amp;gt;% 
  raster::rasterFromXYZ(
     crs = crs_raster_format
  )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in showSRID(uprojargs, format = &amp;quot;PROJ&amp;quot;, multiline = &amp;quot;NO&amp;quot;): Discarded datum Unknown based on GRS80 ellipsoid in CRS definition,
##  but +towgs84= values preserved&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;step-2-fit-a-model&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Step 2: Fit a model&lt;/h3&gt;
&lt;p&gt;Now that we have surpassed the first line of confusion we can progress to the next one. Because even now that we have data to interpolate from and a grid to interpolate to, the process in between does (in most cases) not require one but two more steps. The algorithm of our choice must be fitted to our data before we can use that fit to make interpolations.
In R those two processes are (usually) cleanly separated. This apparently makes perfect sense to statisticians for which, after all, the whole language was build. For the average geoscience rookie/end user, however, this might be a novel concept and appear unnecessarily cumbersome. Why would we separate fitting of data with interpolating from it? After all, it’s not like we are going to use the fitted model on any other data anyway. But bear with me, it can be done.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# We start with functions that return model objects as this is the most 
# common case

# Nearest Neighbor
fit_NN &amp;lt;- gstat::gstat( # using package {gstat} 
  formula = NH4 ~ 1,    # The column `NH4` is what we are interested in
  data = as(sf_NH4, &amp;quot;Spatial&amp;quot;), # using {sf} and converting to {sp}, which is expected
  nmax = 10, nmin = 3 # Number of neighboring observations used for the fit
)

# Inverse Distance Weighting
fit_IDW &amp;lt;- gstat::gstat( # The setup here is quite similar to NN
  formula = NH4 ~ 1,
  data = as(sf_NH4, &amp;quot;Spatial&amp;quot;),
  nmax = 10, nmin = 3,
  set = list(idp = 0.5) # inverse distance power
)

# Thin Plate Spline Regression
fit_TPS &amp;lt;- fields::Tps( # using {fields}
  x = as.matrix(pts_NH4[, c(&amp;quot;X&amp;quot;, &amp;quot;Y&amp;quot;)]), # accepts points but expects them as matrix
  Y = pts_NH4$NH4,  # the dependent variable
  miles = FALSE     # EPSG 25833 is based in meters
)

# Generalized Additive Model
fit_GAM &amp;lt;- mgcv::gam( # using {mgcv}
  NH4 ~ s(X, Y),      # here come our X/Y/Z data - straightforward enough
  data = pts_NH4      # specify in which object the data is stored
)

# Next we use a couple of functions that have a slightly different modus
# operandi as they in fact already return interpolated Z values.

# Triangular Irregular Surface
fit_TIN &amp;lt;- interp::interp( # using {interp}
  x = pts_NH4$X,           # the function actually accepts coordinate vectors
  y = pts_NH4$Y,
  z = pts_NH4$NH4,
  xo = grd_template$X,     # here we already define the target grid
  yo = grd_template$Y,
  output = &amp;quot;points&amp;quot;
) %&amp;gt;% bind_cols()

# Automatized Kriging  
fit_KRIG &amp;lt;- automap::autoKrige(      # using {automap}
  formula = NH4 ~ 1,                 # The interface is similar to {gstat} but
  input_data = as(sf_NH4, &amp;quot;Spatial&amp;quot;) # {automap} makes a lot of assumptions for you
) %&amp;gt;% 
  .$krige_output %&amp;gt;%  # the function returns a complex object with lot&amp;#39;s of metainfo
  as.data.frame() %&amp;gt;% # we keep only the data we are interested in
  dplyr::select(X = x1, Y = x2, Z = var1.pred) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [using ordinary kriging]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;interpolate&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Interpolate!&lt;/h3&gt;
&lt;p&gt;By now, everything should be in place. We have data with our measured information, we have specified the precise coordinates for which new information is to be calculated and we have defined the spatial correlation within our data. Now we only need to tell R to make the final connection. But of course, there are again a couple of ways to do that, depending on the interface and object structure of the package that provides the interpolation algorithm.&lt;/p&gt;
&lt;div id=&#34;case-1-we-already-have-it&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Case 1: We already have it&lt;/h4&gt;
&lt;p&gt;Some packages just skip the two-step-approach described in the prior chapter and right away provide you with X, Y and interpolated Z values. Among the algorithms used in the chunk above, this is the case for &lt;code&gt;interp::interp()&lt;/code&gt; and &lt;code&gt;automap::autoKrige()&lt;/code&gt;. We can just rasterize their output.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Triangular Irregular Surface
interp_TIN &amp;lt;- raster::rasterFromXYZ(fit_TIN, crs = crs_raster_format)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in showSRID(uprojargs, format = &amp;quot;PROJ&amp;quot;, multiline = &amp;quot;NO&amp;quot;): Discarded datum Unknown based on GRS80 ellipsoid in CRS definition,
##  but +towgs84= values preserved&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Automatized Kriging
interp_KRIG &amp;lt;- raster::rasterFromXYZ(fit_KRIG, crs = crs_raster_format)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in showSRID(uprojargs, format = &amp;quot;PROJ&amp;quot;, multiline = &amp;quot;NO&amp;quot;): Discarded datum Unknown based on GRS80 ellipsoid in CRS definition,
##  but +towgs84= values preserved&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Note that you can inspect the result of your interpolation anytime with a 
# simple `plot()`, if it is a {raster*} object
plot(interp_KRIG)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-05-21-guide_to_spatial_interp/index_files/figure-html/rasterize_case1-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;case-2-using-rasterinterpolate&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Case 2: Using &lt;code&gt;raster::interpolate&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Most geospatial interpolation algorithms will return a model object and if you are not really into statistics and R in general, those will appear mostly useless, as printing them reveals little that would seem of interest to a layperson.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(fit_TPS)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Call:
## fields::Tps(x = as.matrix(pts_NH4[, c(&amp;quot;X&amp;quot;, &amp;quot;Y&amp;quot;)]), Y = pts_NH4$NH4, 
##     miles = FALSE)
##                                                
##  Number of Observations:                64     
##  Number of parameters in the null space 3      
##  Parameters for fixed spatial drift     3      
##  Model degrees of freedom:              50.4   
##  Residual degrees of freedom:           13.6   
##  GCV estimate for sigma:                8.145  
##  MLE for sigma:                         6.015  
##  MLE for rho:                           2279000
##  lambda                                 1.6e-05
##  User supplied rho                      NA     
##  User supplied sigma^2                  NA     
## Summary of estimates: 
##                  lambda      trA      GCV      shat -lnLike Prof converge
## GCV        1.587428e-05 50.44717 313.2434  8.144528     284.9669        8
## GCV.model            NA       NA       NA        NA           NA       NA
## GCV.one    1.587428e-05 50.44717 313.2434  8.144528           NA        8
## RMSE                 NA       NA       NA        NA           NA       NA
## pure error           NA       NA       NA        NA           NA       NA
## REML       4.336959e-03 13.00953 335.2979 16.344436     265.3901        6&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The upside is that many R functions are specifically build around the conventions defined for model objects, so you do not really have to worry why things work, because they usually just do work, as long as you remember were to insert which object. We will take advantage of this and just plug all our remaining model objects, those that do not yet hold any interpolated values at our target grid, into the &lt;code&gt;raster::interpolate&lt;/code&gt; function and have it take care of all the rest.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Nearest Neighbor
interp_NN &amp;lt;- interpolate(grd_template_raster, fit_NN)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [inverse distance weighted interpolation]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Inverse Distance Weighting
interp_IDW &amp;lt;- interpolate(grd_template_raster, fit_IDW)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [inverse distance weighted interpolation]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Thin Plate Spline Regression
interp_TPS &amp;lt;- interpolate(grd_template_raster, fit_TPS)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;case-3-using-statspredict&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Case 3: Using &lt;code&gt;stats::predict&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;So this is probably R’s “official” way for interpolating new values from a model fit. It should work with all model objects as every contributor who has her/his package create a model object probably has this function in mind. &lt;code&gt;raster::interpolate&lt;/code&gt; on the other hand seems not to be working with spatial GAMs. But by falling back on the lower-level &lt;code&gt;stats::predict&lt;/code&gt; we can make it work with just a little more effort&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Generalized Additive Model
interp_GAM &amp;lt;- grd_template %&amp;gt;% 
  mutate(Z = predict(fit_GAM, .)) %&amp;gt;% 
  rasterFromXYZ(crs = crs_raster_format)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in showSRID(uprojargs, format = &amp;quot;PROJ&amp;quot;, multiline = &amp;quot;NO&amp;quot;): Discarded datum Unknown based on GRS80 ellipsoid in CRS definition,
##  but +towgs84= values preserved&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;visualization-conclusion-further-reading&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Visualization, conclusion, further reading&lt;/h3&gt;
&lt;p&gt;Now that we have interpolated rasters, we should visualize them and have a look!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot_my_rasters &amp;lt;- function(raster_object, raster_name){
  
  df &amp;lt;- rasterToPoints(raster_object) %&amp;gt;% as_tibble()
  colnames(df) &amp;lt;- c(&amp;quot;X&amp;quot;, &amp;quot;Y&amp;quot;, &amp;quot;Z&amp;quot;)
  
  ggplot(df, aes(x = X, y = Y, fill = Z)) +
    geom_raster() +
    ggtitle(label = raster_name) +
    scale_fill_viridis(option = &amp;quot;C&amp;quot;) +
    theme_bw() +
    theme(
      axis.text = element_blank(),
      axis.title = element_blank(),
      axis.ticks = element_blank()
    )
}

rasterlist &amp;lt;- list(
    &amp;quot;Nearest Neighbor&amp;quot; = interp_NN, 
    &amp;quot;Inverse Distance Weighted&amp;quot; = interp_IDW, 
    &amp;quot;Kriging&amp;quot; = interp_KRIG, 
    &amp;quot;Thin Plate Spline Regression&amp;quot; = interp_TPS,
    &amp;quot;Triangular Irregular Surface&amp;quot; = interp_TIN, 
    &amp;quot;Generalized Additive Model&amp;quot; = interp_GAM
  )

plotlist &amp;lt;- map2(
  rasterlist,
  names(rasterlist),
  plot_my_rasters
)

# Note that the next trick only works because of library(patchwork)
(plotlist[[1]] + plotlist[[2]]) /
  (plotlist[[3]] + plotlist[[4]]) /
  (plotlist[[5]] + plotlist[[6]])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-05-21-guide_to_spatial_interp/index_files/figure-html/viz-1.png&#34; width=&#34;672&#34; /&gt;
As you can see, the result strongly depends on the algorithm that was used for the interpolation. This is somewhat overemphasized in the plot above, because for this tutorial I did not attempt at all to fine tune the different interpolation algorithms. In a real project in either science or engineering, one would have to put a lot of thought into model parameterization and carefully evaluate the natural situation and the mathematical implications. But this is stuff for another day’s blogpost. If you want to learn more, here are a couple of resources you could check out:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The company Goldensoft that sells the commercial interpolation software surfer has &lt;a href=&#34;https://support.goldensoftware.com/hc/en-us/articles/231348728-A-Basic-Understanding-of-Surfer-Gridding-Methods-Part-1&#34;&gt;on its website&lt;/a&gt; a nice overview for many of the methods I used in this blogpost that can serve as a starting point&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NCAR/fields/blob/master/fieldsVignette.pdf&#34;&gt;The vignette of {fields}&lt;/a&gt; provides a more in depth dive into the intricate details of spatial interpolation with R&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/noamross&#34;&gt;Noam Ross&lt;/a&gt; has created an &lt;a href=&#34;https://noamross.github.io/gams-in-r-course/&#34;&gt;excellent online course on (spatial) Generalized Additive Models&lt;/a&gt; that will get you from zero to hero in no time.&lt;/li&gt;
&lt;li&gt;Check out &lt;a href=&#34;https://cran.r-project.org/web/packages/gstat/vignettes/gstat.pdf&#34;&gt;{gstat}’s vignettes&lt;/a&gt; for more details on how to get more control about Kriging.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Constructing Mineral Phase Diagrams in R</title>
      <link>/post/phase_diagrams/</link>
      <pubDate>Tue, 21 Apr 2020 00:00:00 +0000</pubDate>
      <guid>/post/phase_diagrams/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#preface&#34;&gt;Preface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#preparing-input-data&#34;&gt;Preparing Input Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#example-1-experimental-data-set&#34;&gt;Example 1: Experimental Data set&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#example-2-thermodynamic-model-melts-data-set&#34;&gt;Example 2: Thermodynamic Model (MELTS) Data set&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#concluding-remarks&#34;&gt;Concluding Remarks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;preface&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Preface&lt;/h2&gt;
&lt;p&gt;In petrology it is common to be confronted with or thinking about mineral phase stability. Which minerals form in a certain spot (of melt) is a complex matter depending not only on the chemical composition but also on a multitude of physical factors. The most prominent parameters are probably temperature and pressure, but they are far from being the only variables.&lt;/p&gt;
&lt;p&gt;For example there is oxygen fugacity, a somewhat arcane concept describing the level of oxidation of a magma, which potentially has a huge impact on the phase assemblage that forms. Michael Anenburg has been writing a lot about this fascinating topic and highly recommend his Twitter tutorials.&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;A small oxygen fugacity thread. There&amp;#39;s a common misconception that ƒO₂ = pO₂ (i.e. partial pressure of oxygen).&lt;br&gt;Let&amp;#39;s have a look at some numbers. &lt;a href=&#34;https://t.co/fAJqlIbOCJ&#34;&gt;pic.twitter.com/fAJqlIbOCJ&lt;/a&gt;&lt;/p&gt;&amp;mdash; Michael Anenburg (@manenbu) &lt;a href=&#34;https://twitter.com/manenbu/status/1251831777754181632?ref_src=twsrc%5Etfw&#34;&gt;April 19, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;p&gt;But I am digressing. Phase stability data, by and at large, can be obtained mostly through three ways:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;You can do an petrological experiment. You put some rock powder into what is basically a very sophisticated oven and have total control over the parameters (well, in theory, at least). The downside is that this approach is slow and laborious. Access to experimental facilities is restricted and operating pressure vessels requires special training. Also some of them have a tendency to explode and wreck varying degrees of havoc along the way.&lt;/li&gt;
&lt;li&gt;You can investigate a natural rock sample, trying to figure out the environment which lead to its formation e.g. by applying geothermometers and geobarometers. It is a fascinating field and I should write a blog post about it one day. The downside here is that those methods often come with some significant error-bars.&lt;/li&gt;
&lt;li&gt;The third method I can think of is to make use of thermodynamic modelling. The advantage clearly is that this approach comes at a fraction of the cost (both money and time) of the other two and is assumed to be considerably more accurate than classical geothermometry and co. A downside is that thermodynamic modeling requires a lot of knowledge about both petrology and the modeling technology of your choice, before you can even start creating anything insightful. Also, most modern petrology-centered modeling tools I know about have rather crude interfaces that can considerably hamper your workflow.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Whatever your line of petrological work is: after obtaining phase stability data, the next big task is to turn that data into a compelling visualization. The classical way to do so is creating a &lt;a href=&#34;https://en.wikipedia.org/wiki/Phase_diagram&#34;&gt;Phase-Diagram&lt;/a&gt;. Here is an example of one I did many years ago for my master thesis:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;msc_P-T_0CO2.png&#34; alt=&#34;Experimental phase stability of a nephelinitic melt&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;&lt;em&gt;Experimental phase stability of a nephelinitic melt&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;So here we see basically two main features. There is some kind of table-like graphical indicator displaying the phase assemblage for given parameter-combinations. Then there are some annotated lines, stating explicitly when a phase joins or leaves the assemblage. I thought it wouldn’t be so hard to translate these two relatively simple features into code, so that we could have some fun automatizing this otherwise slightly dull task. We will see about that.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;preparing-input-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Preparing Input Data&lt;/h2&gt;
&lt;p&gt;The above phase-diagram was drawn by hand in a &lt;a href=&#34;https://en.wikipedia.org/wiki/Vector_graphics&#34;&gt;vector graphics&lt;/a&gt; program. That’s ok if you only have a couple of small data-sets, but especially when you work with modeling data, it would be better to have an automatic approach that gives you a fast visual feedback of what you are dealing with. That would come with the additional advantage of making your work reproducible and therefore potentially more attractive to collaborators and reviewers. In this blog-post we will explore the possibilities offered in &lt;a href=&#34;https://www.r-project.org/&#34;&gt;R&lt;/a&gt; to generate phase diagrams. For a start, let’s try to recreate my old master thesis’s illustration with code.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# These are packages needed for data wrangling.
# Note that their loading order is not arbitrary, 
# as e.g. the function &amp;#39;select&amp;#39; exists for both the raster and the tidyverse
# package (via dplyr) and we will need only dplyr::select()

library(raster)
library(sf)
library(smoothr)
library(tidyverse)
library(ggspatial)


# These are packages to style output such as tables and plots
library(kableExtra)
library(paletteer)
library(gridExtra)
library(grid)
library(ggpmisc)

# You can download the phase stability data from my old thesis from github
df_exp &amp;lt;- readr::read_csv(&amp;quot;https://raw.githubusercontent.com/Ignimbrit/exchange/master/data/2020/OL_EXP_PHASES.csv&amp;quot;)

phases_exp &amp;lt;- df_exp %&amp;gt;% dplyr::select(-P_MPa, -T_C) %&amp;gt;% colnames() 

# Let&amp;#39;s inspect the data!
kableExtra::kable(df_exp)&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
P_MPa
&lt;/th&gt;
&lt;th style=&#34;text-align:right;&#34;&gt;
T_C
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
Combeite
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
Corundum
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
Magnetite
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
Melanite
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
Nepheline
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
Pyroxene
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
300
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
800
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TRUE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TRUE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
200
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
800
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TRUE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TRUE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
100
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
800
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TRUE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
300
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
750
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TRUE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TRUE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
200
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
750
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TRUE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TRUE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
100
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
750
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TRUE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TRUE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TRUE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
300
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
700
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TRUE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TRUE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TRUE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
200
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
700
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TRUE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TRUE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TRUE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
100
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
700
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TRUE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TRUE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TRUE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TRUE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TRUE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
300
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
650
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TRUE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TRUE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TRUE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TRUE
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
200
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
650
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TRUE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TRUE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TRUE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TRUE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TRUE
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
100
&lt;/td&gt;
&lt;td style=&#34;text-align:right;&#34;&gt;
650
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TRUE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TRUE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TRUE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TRUE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
FALSE
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
TRUE
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;You can see that we have to independent variable &lt;code&gt;T_C&lt;/code&gt; (Temperature in Celsius) and &lt;code&gt;P_MPa&lt;/code&gt; (Pressure in Mega-Pascal) that are combined to form a regular, rectangular grid. Each combination of P and T represents an actual experiment that was performed in a &lt;a href=&#34;https://www.mineralogie.uni-hannover.de/542.html?&amp;amp;L=1&#34;&gt;CSPV&lt;/a&gt; and later analyzed by &lt;a href=&#34;https://en.wikipedia.org/wiki/Electron_microprobe&#34;&gt;microprobe&lt;/a&gt;. From the analyses we know which minerals showed up (&lt;code&gt;TRUE&lt;/code&gt;) at a given combination of conditions.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# We sould also take a quick look at some kind of preliminary graph to
# get a &amp;#39;feeling&amp;#39; for the visual space we will be working with

df_exp %&amp;gt;% tidyr::pivot_longer(Combeite:Pyroxene) %&amp;gt;% 
  dplyr::filter(value == TRUE) %&amp;gt;% 
  ggplot(aes(x = T_C, y = P_MPa, color = name)) +
  geom_jitter(width = 10, height = 10, size = 3)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-04-14-phase-stability-diagrams/index_files/figure-html/inspect_exp-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;So this is what we will be trying to transform into a phase diagram. The way we will attempt that is essentially to draw some kind of polygons of convex hulls around groups of point clouds as shown above. This is why at the startup of this script we loaded some packages usually associated with spatial data manipulation. Those packages provide us with a comprehensive toolbox for manipulating polygons. That we can leverage spatial algorithms for ggplot2 plots is possible thanks to the ggspatial package written by &lt;a href=&#34;https://twitter.com/paleolimbot&#34;&gt;Dr. Dewey Dunnington&lt;/a&gt; who demonstrated the approach in &lt;a href=&#34;https://gist.github.com/paleolimbot/e854c098c6d95330c361014276b5a8db&#34;&gt;this gist&lt;/a&gt;, related to an excellent &lt;a href=&#34;https://fishandwhistle.net/post/2018/pourbaix-ish-diagrams-using-phreeqc-and-r/&#34;&gt;blog post about hydrogeochemical modelling&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In order to bring &lt;code&gt;df_exp&lt;/code&gt; in a form that can be plotted as a phase diagram we need to do quite a lot of data wrangling. I realize that this might not be an interesting read for everyone, so I’ve hidden the details of the data transformation in the folded tab below. You can look at it by clicking the red textline. If you are only interested in the actual plotting procedure, you can keep it folded and just move on.&lt;/p&gt;
&lt;details&gt;
&lt;p&gt;&lt;summary&gt; &lt;span style=&#34;color: red;&#34;&gt;Show me the detailed data treatment procedure!&lt;/span&gt;&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;color: grey;&#34;&gt;Alright, welcome to the machine room of this blog post. Here we will define a set of functions to transform the table shown above into data formats accepted by ggplot2’s geoms. I will be working with functions rather than manipulating the input data directly, so that we can easily apply our workflow to other datasets.&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# First let&amp;#39;s create away to find all existing combinations of phases
# in the dataset and assign a group-variable to each of them

phase_group &amp;lt;- function(x, ...){

  # the input of the function is supposed to be a dataframe from which 
  # phase-related coloumns can be selected just like with dplyr::select()
  df &amp;lt;- x %&amp;gt;% dplyr::select(!!!enquos(...))
  force(df)
  
  phase_names &amp;lt;- colnames(df)
  
  # the next step ist to find the phase assemblage coexisting with each
  # combintation of P &amp;amp; T
  phase_list_lgl &amp;lt;- purrr::pmap(as.list(df), c)
  
  phase_list_chr &amp;lt;- vector(&amp;quot;list&amp;quot;, length = length(phase_list_lgl))
  for(i in seq_along(phase_list_chr)){
    phase_list_chr[[i]] &amp;lt;- phase_names[phase_list_lgl[[i]]]
  }
  
  # now we save the information in a single string (Phase1 + Phase4 + ...)
  # per observation.
  combinations &amp;lt;- purrr::map_chr(
      phase_list_chr,
      .f = paste,
      collapse = &amp;quot; + &amp;quot;
    ) %&amp;gt;% 
    factor(
      levels = sort(unique(.))
    )
  
  # Having a unique string (or rather factor) is nice, but some operations
  # require numbered phase groups
  x %&amp;gt;% mutate(
    phase_combo = combinations
  ) %&amp;gt;% 
    mutate(
      group_no = as.integer(phase_combo)
    )
}


# Now that we can identify the unique phase assemblage for each observation
# we can make a raster. Think: x = T, y = P, z = assemblage no.
# This way we can descirbe the area that is occupied by a certain assemblage.
polygonize_phasegroup &amp;lt;- function(x, y, z){
  
  #Note that this function expects a regular grid
  raster::rasterFromXYZ(
    data.frame(
      x = x,
      y = y,
      z = z
    )
  ) %&amp;gt;% # converting to polygons
    raster::rasterToPolygons(dissolve = TRUE) %&amp;gt;% 
    sf::st_as_sf() %&amp;gt;% 
    ggspatial::df_spatial() # converting to ggplot2 polygon notation
}


# What we did to identify the area occupied by a certain combination of
# phases we can now more or less repeat to find the stability field 
# for a single phase
find_phase_border &amp;lt;- function(
  phase_exists, x, y, raster_res = c(NA, NA), size = 1, smooth_factor = 1
){
  rawdat &amp;lt;- dplyr::bind_cols(x = x, y = y, z = phase_exists)
  df &amp;lt;- rawdat %&amp;gt;% 
    dplyr::filter(z) %&amp;gt;% 
    dplyr::mutate(z = as.integer(z))
  
  # Make sure we have a regular grid 
  phase_grid &amp;lt;- expand.grid(x = sort(unique(df$x)), y = unique(sort(df$y))) %&amp;gt;% 
    dplyr::left_join(
      df,
      by = c(&amp;quot;x&amp;quot;, &amp;quot;y&amp;quot;)
    ) %&amp;gt;% 
    as.data.frame()
  
  phase_grid$z[is.na(phase_grid$z)] &amp;lt;- 0
  
  # translate to polygon, smoothing the edges a little
  coord_sf &amp;lt;- raster::rasterFromXYZ(
    phase_grid,
    res = raster_res
  ) %&amp;gt;%  
    raster::rasterToPolygons(dissolve = TRUE) %&amp;gt;%
    sf::st_as_sf() %&amp;gt;% 
    dplyr::filter(z == 1) %&amp;gt;% 
    smoothr::smooth(method = &amp;quot;ksmooth&amp;quot;, smoothness = smooth_factor) 
  
  # resize to avoid overlaps in the plot
  centroid &amp;lt;- sf::st_centroid(coord_sf)
  smaller_sf &amp;lt;- (coord_sf - centroid) * size + centroid
  
  # translate to ggplot2 geom_polygon notation
  smaller_sf %&amp;gt;%
    sf::st_set_geometry(&amp;quot;geometry&amp;quot;) %&amp;gt;% 
    ggspatial::df_spatial()
  
}&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;p&gt;(…)&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;example-1-experimental-data-set&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Example 1: Experimental Data set&lt;/h2&gt;
&lt;p&gt;So here we continue equipped with some additional functions we defined in the folded chunk. Now we can draw polygons that will mark the area occupied by a distinct assemblage.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Create grouping variable for phase assemblages and assign to every 
# combination of P &amp;amp; T

df_exp_grouped &amp;lt;- phase_group(df_exp, Combeite:Pyroxene)

# make polygons for unique combinations of minerals
polygons_exp &amp;lt;- polygonize_phasegroup(
  x = df_exp_grouped$T_C,
  y = df_exp_grouped$P_MPa,
  z = df_exp_grouped$group_no
) %&amp;gt;% 
  left_join(
    select(df_exp_grouped, group_no, phase_combo),
    by = c(&amp;quot;z&amp;quot; = &amp;quot;group_no&amp;quot;)
  )

# Inspect what we just created
ggplot(
  data = polygons_exp,
  mapping = aes(
    x = x, y = y, z = z, fill = feature_id
  )
) +
  geom_polygon()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-04-14-phase-stability-diagrams/index_files/figure-html/phase_polygons-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Well, this goes in the right direction but there is still quite some work to do. We can see now the area associated with a distinct assemblage, but the labeling sure can be improved a lot. Second, we should also find a way to communicate clearly, which change in mineral stability leads to the modification of an assemblage (e.g. is magnetite coming in or going out?). Let’s see if we can make the info we’ve got a bit more explicit in the plot. We will start by collecting the phase stability areas of the single minerals.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# make polygons showing the area of stability for every single phase
# Note that the function &amp;quot;find_phase_border&amp;quot; was prepared in the folded chunk.
phase_borders_exp &amp;lt;-  purrr::map(
  dplyr::select(df_exp_grouped, Combeite:Pyroxene),
  find_phase_border,
  x = df_exp_grouped$T_C,
  y = df_exp_grouped$P_MPa,
  raster_res = c(50, 100),
  size = 1.1
)

# gather the polygons associated with the minerals in a single tibble
border_df_exp &amp;lt;- purrr::map2_dfr(
  phase_borders_exp,
  names(phase_borders_exp),
  function(.x, .y){mutate(.x, Phase = .y)}
) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next we want to reproduce the table-shaped annotations from the original drawing that give such a nice and quick overview about the composition of the assemblage&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# abbreviate the mineralnames to save space
# c.f. https://www.unige.ch/sciences/terre/research/Groups/mineral_resources/opaques/ore_abbreviations.php
abbrv &amp;lt;- c(&amp;quot;cmb&amp;quot;, &amp;quot;crn&amp;quot;, &amp;quot;mgt&amp;quot;, &amp;quot;mel&amp;quot;, &amp;quot;nph&amp;quot;, &amp;quot;cpx&amp;quot;)

# The table-shaped annotation label of the assemblage should be associated
# with the assemblage polygons we&amp;#39;ve seen in the last plot

generic_input &amp;lt;- polygons_exp %&amp;gt;% 
  dplyr::group_by(phase_combo) %&amp;gt;% 
  dplyr::summarize(x = mean(x), y = mean(y)) %&amp;gt;% 
  dplyr::mutate(
    phase_list = stringr::str_split(phase_combo, pattern = &amp;quot; \\+ &amp;quot;)
  ) %&amp;gt;% 
  dplyr::mutate(
    phase_presence = purrr::map(
      phase_list,
      function(x, table) {as.integer(match(x, table, nomatch = 0) &amp;gt; 0) + 1},
      x = phases_exp
    )
  )

# The next part is a bit tricky. There is no standard way of getting the 
# kind of annotation we want into ggplot2. We have to go one level deeper
# and construct our own graphical objects (&amp;quot;grob&amp;quot;) using a couple of
# low level graphical functions from packages {grid} and {gridExtra}

catcher_outer &amp;lt;- vector(&amp;quot;list&amp;quot;, length = nrow(generic_input))
for(i in seq_along(catcher_outer)){
  
  catcher_inner &amp;lt;- vector(&amp;quot;list&amp;quot;, length = length(abbrv))
  for (j in seq_along(abbrv)) {
    catcher_inner[[j]] &amp;lt;- grid::grobTree(
      grid::rectGrob(
        gp = grid::gpar(
          fill = c(&amp;quot;black&amp;quot;, &amp;quot;white&amp;quot;)[generic_input$phase_presence[[i]][j]], 
          lwd = 2
        )
      ), 
      grid::textGrob(abbrv[j], gp = grid::gpar(fontsize = 10))
    )
  }
  
  catcher_outer[[i]] &amp;lt;- gridExtra::arrangeGrob(grobs = catcher_inner, ncol = 3)
  
}

# Collect the objects we just build along with some metadata in a tibble
grob_df &amp;lt;- generic_input %&amp;gt;% 
  dplyr::mutate(
    grob = catcher_outer,
    width = 0.17,
    height = 0.17
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally we now should have all the information/data we need for a pleasant plot.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot() +
  geom_polygon( # phase assemblage polygons
    data = polygons_exp,
    mapping = aes(
      x = x, y = y, fill = feature_id, group = piece_id
    ),
    color = &amp;quot;black&amp;quot;,
    show.legend = FALSE,
    alpha = 0.25
  ) +
  geom_polygon( # single mineral phase polygons
    data = border_df_exp,
    aes(
      x = x, y = y, color = Phase
    ),
    fill = NA,
    size = 1.25
  ) +
  ggpmisc::geom_grob( # custom annotation grobs
    data = grob_df,
    aes(
      x = x, y = y, label = grob, vp.width = width, vp.height = height
    )
  ) +
  coord_cartesian(xlim = c(625, 825), ylim = c(50, 350), expand = FALSE) +
  paletteer::scale_fill_paletteer_d(&amp;quot;nord::algoma_forest&amp;quot;) +
  paletteer::scale_colour_paletteer_d(&amp;quot;yarrr::appletv&amp;quot;, direction = 1) +
  labs(
    y = &amp;quot;Pressure [MPa]&amp;quot;, x = &amp;quot;Temperature [°C]&amp;quot;,
    title = &amp;quot;Experimental Phase Stability of Nephelinitic Melt&amp;quot;
  ) +
  theme_bw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-04-14-phase-stability-diagrams/index_files/figure-html/exp_plot_complete-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;So that’s the final plot. There are still a few differences to the original. On the one hand, custom text annotations for lines are hard to automatize, on the other hand, drawing your phase diagram automatically from data makes it easier to use colors. One could opt to use different linetypes for the mineral stability borders, but personally I found the color coding to be more clear. The plot could also use some manual fine tuning on the edges, but fortunately it’s very easy to export ggplot2 objects to &lt;code&gt;svg&lt;/code&gt;, so one could continue in e.g. &lt;a href=&#34;https://inkscape.org/de/&#34;&gt;Inkscape&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;example-2-thermodynamic-model-melts-data-set&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Example 2: Thermodynamic Model (MELTS) Data set&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://melts.ofm-research.org/&#34;&gt;MELTS&lt;/a&gt; is “a software package designed to facilitate thermodynamic modeling of phase equilibria in magmatic systems. It provides the ability to compute equilibrium phase relations for igneous systems over the temperature range 500-2000 °C and the pressure range 0-2 GPa.”&lt;/p&gt;
&lt;p&gt;Over the last years, MELTS has (to my knowledge) become one of the most popular thermodynamic modeling suites for petrology-related research. The advantages of modelling over experimental approaches we have already discussed. Now we will look at a modeled data set with a much much finer temperature resolution than ever would be possible to accomplish in a lab.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# You can download the data we will use from GitHub:
df_MELTS &amp;lt;- read_csv(&amp;quot;https://raw.githubusercontent.com/Ignimbrit/exchange/master/data/2020/MELTS_DAWN_simplified.csv&amp;quot;)

phases_MELTS &amp;lt;- df_MELTS %&amp;gt;% dplyr::select(-P_MPa, -T_C) %&amp;gt;% colnames() 

df_MELTS&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 266 x 8
##      T_C P_MPa biotite clinopyroxene feldspar olivine orthopyroxene spinel
##    &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;lgl&amp;gt;   &amp;lt;lgl&amp;gt;         &amp;lt;lgl&amp;gt;    &amp;lt;lgl&amp;gt;   &amp;lt;lgl&amp;gt;         &amp;lt;lgl&amp;gt; 
##  1 1222.   100 FALSE   FALSE         FALSE    TRUE    FALSE         FALSE 
##  2 1217.   100 FALSE   FALSE         FALSE    TRUE    FALSE         FALSE 
##  3 1212.   100 FALSE   FALSE         FALSE    TRUE    FALSE         FALSE 
##  4 1207.   100 FALSE   FALSE         FALSE    TRUE    FALSE         FALSE 
##  5 1202.   100 FALSE   FALSE         FALSE    TRUE    FALSE         FALSE 
##  6 1197.   100 FALSE   FALSE         FALSE    TRUE    FALSE         FALSE 
##  7 1192.   100 FALSE   FALSE         FALSE    TRUE    FALSE         FALSE 
##  8 1187.   100 FALSE   FALSE         FALSE    TRUE    FALSE         FALSE 
##  9 1182.   100 FALSE   FALSE         FALSE    TRUE    FALSE         FALSE 
## 10 1177.   100 FALSE   FALSE         FALSE    TRUE    FALSE         FALSE 
## # ... with 256 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This modelling data was kindly provided by &lt;a href=&#34;https://twitter.com/rockdoc11&#34;&gt;Dr. Dawn Ruth&lt;/a&gt; who, by the way, also gave me the initial impulse to look into phase diagram creation in R. I have slightly simplified the MELTS output to make the table fit the needs for this demonstration. As you can see, we are again provided with two independent variables &lt;code&gt;T_C&lt;/code&gt; and &lt;code&gt;P_MPa&lt;/code&gt; and a set of six dependent variable columns, indicating the presence of various mineral phases for a given P-T. Unlike with the experimental data set, however, this time we have 266 observations (=rows in the table) instead of just 12. Again we start with a quick visualization of the shape of data we got here.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_MELTS %&amp;gt;% tidyr::pivot_longer(biotite:spinel) %&amp;gt;% 
  dplyr::filter(value == TRUE) %&amp;gt;% 
  ggplot(aes(x = T_C, y = P_MPa, color = name)) +
  geom_jitter(width = 0, height = 10)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-04-14-phase-stability-diagrams/index_files/figure-html/inspect_MELTS-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Note that unlike in the experimental data set, the data in &lt;code&gt;df_MELTS&lt;/code&gt; is irregularly spaced. There are observations for 0.5, 1, 2 and 5 kbar (but not for e.g. 1.5 or 3 kbar). Also there are observations at higher temperatures, the higher the pressure in the simulation was. Because of the way we have build our tools for creating phase diagrams, we will first have to rectify those “holes” in the data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# First we get rid of decimal places. We do not need to be that precise for the
# diagram and they make creating a regular grid unecessary difficult.

df_MELTS_simple &amp;lt;- df_MELTS %&amp;gt;% 
  dplyr::mutate(
    T_C = as.integer(round(T_C)),
    P_MPa = as.integer(P_MPa)
    )


# The regular grid shall have a T-resolution of 1°C and a P-resolution of
# 50 MPa, which (more or less) corresponds to the steps modeled in MELTS
# in this case.

range_MELTS_T &amp;lt;- seq(
  min(df_MELTS_simple$T_C), 
  max(df_MELTS_simple$T_C), 
  1
  )

range_MELTS_P &amp;lt;- seq(
  min(df_MELTS_simple$P_MPa), 
  max(df_MELTS_simple$P_MPa), 
  50
  )


# Next we fill in the holes in our regular grid.
# We do so by &amp;quot;wandering down&amp;quot; the pressure (later the temperature) sequence
# and whenever we encounter missing information about the presence of mineral
# phases, we assume nothing has changed since the last time we saw them.
# This is not so much different from what you would do when drawing a phase-
# diagram by hand. That workflow was inspired by a vignette of the tsibble
# package originally adressing missing values in time-series data
# https://tsibble.tidyverts.org/articles/implicit-na.html

grd_MELTS &amp;lt;- as.data.frame(expand.grid(range_MELTS_T, range_MELTS_P)) %&amp;gt;% 
  dplyr::rename(T_C = Var1, P_MPa = Var2) %&amp;gt;% 
  dplyr::arrange(dplyr::desc(P_MPa), dplyr::desc(T_C)) %&amp;gt;% 
  dplyr::left_join(df_MELTS_simple, by = c(&amp;quot;T_C&amp;quot;, &amp;quot;P_MPa&amp;quot;)) %&amp;gt;% 
  dplyr::group_split(P_MPa) %&amp;gt;% 
  purrr::map_dfr(
    .f = tidyr::fill, biotite:spinel,  .direction = &amp;quot;down&amp;quot;
    ) %&amp;gt;% 
  dplyr::group_split(T_C) %&amp;gt;% 
  purrr::map_dfr(
    .f = tidyr::fill, biotite:spinel,  .direction = &amp;quot;down&amp;quot;
    )%&amp;gt;% 
  dplyr::group_split(T_C) %&amp;gt;% 
  purrr::map_dfr(
    .f = tidyr::fill, biotite:spinel,  .direction = &amp;quot;up&amp;quot;
    )

grd_MELTS %&amp;gt;% tidyr::pivot_longer(biotite:spinel) %&amp;gt;% 
  dplyr::filter(value == TRUE) %&amp;gt;% 
  ggplot(aes(x = T_C, y = P_MPa, color = name)) +
  geom_jitter(width = 0, height = 10)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-04-14-phase-stability-diagrams/index_files/figure-html/MELTS_regularize-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;As you can see, the data is now both rectangular and regular and we can apply our established workflow of creating a raster and subsequently polygonizing it.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Identify unique mineral assemblages
df_MELTS_grouped &amp;lt;- phase_group(grd_MELTS, biotite:spinel)

# Create assemblage polygons
polygons_MELTS &amp;lt;- polygonize_phasegroup(
  x = df_MELTS_grouped$T_C,
  y = df_MELTS_grouped$P_MPa,
  z = df_MELTS_grouped$group_no
)%&amp;gt;% 
  left_join(
    select(df_MELTS_grouped, group_no, phase_combo),
    by = c(&amp;quot;z&amp;quot; = &amp;quot;group_no&amp;quot;)
  )

# create single phase stability polygons
phase_borders_MELTS &amp;lt;-  purrr::map(
  dplyr::select(df_MELTS_grouped, biotite:spinel),
  find_phase_border,
  x = df_MELTS_grouped$T_C,
  y = df_MELTS_grouped$P_MPa,
  raster_res = c(1, 50),
  size = 1.02,
  smooth_factor = 4
) %&amp;gt;% 
  purrr::map2(
    .x = .,
    .y = seq(1, length(.)),
    function(.x, .y) {
      mutate(
        .x, 
        piece_id = factor(
          as.double(
            as.character(
              piece_id
            )
          ) + .y
        )
      )
    }
  )

# gather the polygons associated with the minerals in a single tibble
border_df_MELTS &amp;lt;- purrr::map2_dfr(
  phase_borders_MELTS,
  names(phase_borders_MELTS),
  function(.x, .y){mutate(.x, Phase = .y)}
) &lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Create table-like assemblage markers as inset plots

# I will abbreviate the mineralnames to save space
# c.f. https://www.unige.ch/sciences/terre/research/Groups/mineral_resources/opaques/ore_abbreviations.php
abbrv_MELTS &amp;lt;- c(&amp;quot;bt&amp;quot;, &amp;quot;cx&amp;quot;, &amp;quot;fs&amp;quot;, &amp;quot;ol&amp;quot;, &amp;quot;ox&amp;quot;, &amp;quot;sp&amp;quot;)

# The table-shaped annotation label of the assemblage should be associated
# with the assemblage polygons we&amp;#39;ve seen in the last plot
generic_input_MELTS &amp;lt;- polygons_MELTS %&amp;gt;% 
  dplyr::group_by(phase_combo) %&amp;gt;% 
  dplyr::summarize(
    x = mean(x), 
    y = mean(y)
    ) %&amp;gt;% 
  dplyr::mutate(
    phase_list = stringr::str_split(phase_combo, pattern = &amp;quot; \\+ &amp;quot;)
  ) %&amp;gt;% 
  dplyr::mutate(
    phase_presence = purrr::map(
      phase_list,
      function(x, table) {as.integer(match(x, table, nomatch = 0) &amp;gt; 0) + 1},
      x = phases_MELTS
    )
  )


# Build the grobs
catcher_outer &amp;lt;- vector(&amp;quot;list&amp;quot;, length = nrow(generic_input_MELTS))
for(i in seq_along(catcher_outer)){
  
  catcher_inner &amp;lt;- vector(&amp;quot;list&amp;quot;, length = length(abbrv_MELTS))
  for (j in seq_along(catcher_inner)) {
    catcher_inner[[j]] &amp;lt;- grid::grobTree(
      grid::rectGrob(
        gp = grid::gpar(
          fill = c(&amp;quot;black&amp;quot;, &amp;quot;white&amp;quot;)[generic_input_MELTS$phase_presence[[i]][j]], 
          lwd = 1.2
        )
      ), 
      grid::textGrob(abbrv_MELTS[j], gp = grid::gpar(fontsize = 7.5))
    )
  }
  
  catcher_outer[[i]] &amp;lt;- gridExtra::arrangeGrob(grobs = catcher_inner, ncol = 3)
  
}

# Collect the objects we just build along with some metadata in a tibble
grob_df_MELTS &amp;lt;- generic_input_MELTS %&amp;gt;% 
  dplyr::mutate(
    grob = catcher_outer,
    width = 0.08,
    height = 0.08
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As the modeled data set is substantially larger than the experimental one we’ve been examining above, we will have to make some visual adjustments to our final phase diagram plot.&lt;/p&gt;
&lt;p&gt;Creating the annotation labels for the MELTS data is somewhat more difficult than for the experimental data. With the experimental data, we positioned those table-shaped annotations centrally within the polygon of the associated assemblage. This works (sometimes) for smaller plots with a limited number of different assemblages, but if we’d use that approach to annotate the MELTS-data phase diagram, the &lt;a href=&#34;https://bookdown.org/rdpeng/RProgDA/the-grid-package.html#grobs&#34;&gt;grobs&lt;/a&gt; would overlap, rendering them unreadable.&lt;/p&gt;
&lt;p&gt;To automatically avoid this issue, we would need some kind of repel-algorithm similar to the functionality provided by the &lt;a href=&#34;https://cran.r-project.org/web/packages/ggrepel/vignettes/ggrepel.html&#34;&gt;ggrepel&lt;/a&gt; package. Unfortunately, ggrepel applies to text annotations only with no simple way to use it for custom grobs. Developing our own repel algorithm on the other hand is way beyond the scope of this blog article, that by now has already escalated significantly beyond what I had initially envisioned for today’s issue.&lt;/p&gt;
&lt;p&gt;To avoid this problem for now I went with an admittedly dodgy fix of making the annotation grobs smaller and adding the &lt;code&gt;position = position_jitter()&lt;/code&gt; argument to &lt;code&gt;ggpmisc::geom_grob&lt;/code&gt;. If this was a plot meant for publication e.g. in a journal, one would probably have to invest the time to adjust each annotation position manually and maybe also set up an additional legend. For now we shall proceed as follows:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot() +
  geom_polygon(
    data = polygons_MELTS,
    mapping = aes(
      x = x, y = y, fill = feature_id, group = piece_id
    ),
    color = &amp;quot;black&amp;quot;,
    show.legend = FALSE,
    alpha = 0.3
  ) +
  geom_polygon(
    data = border_df_MELTS,
    aes(
      x = x, y = y, color = Phase, group = piece_id
    ),
    fill = NA,
    size = 1.25
  ) +
  ggpmisc::geom_grob(
    data = grob_df_MELTS,
    aes(
      x = x, y = y, label = grob, vp.width = width, vp.height = height
    ),
    position = position_jitter(width = 15, height = 15, seed = 42)
  ) +
  coord_cartesian(xlim = c(900, 1250), ylim = c(25, 525), expand = FALSE) +
  paletteer::scale_fill_paletteer_d(&amp;quot;ggsci::default_igv&amp;quot;, direction = 1) +
  paletteer::scale_colour_paletteer_d(&amp;quot;yarrr::appletv&amp;quot;, direction = 1) +
  labs(
    y = &amp;quot;Pressure [MPa]&amp;quot;, x = &amp;quot;Temperature [°C]&amp;quot;,
    title = &amp;quot;Phase Stability of a Magma Modeled with MELTS&amp;quot;
  ) +
  theme_bw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-04-14-phase-stability-diagrams/index_files/figure-html/MELTS_plot_complete-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;concluding-remarks&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Concluding Remarks&lt;/h2&gt;
&lt;p&gt;Creating a workflow to plot mineral phase stability diagrams directly from data and with a minimum of manual alteration has proven to be quite a laborious task in itself. If you are looking for something similar, I hope I could provide you here with some inspiration on how to tackle some of the more arcane problems of confining areas of shared properties within a cartesian grid system. Now that the tools presented in this blog post exist, I can definitely see myself applying them in the future in quite a range of situations, not all of them necessarily related to petrology. As the whole workflow is based around the ideas of grouped polygons, much of it should work for certain spatial issues, too.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Geochemical Modelling of 1D-Transport with Non-Steady Contaminant Input (Tidyphreeqc Part 1)</title>
      <link>/post/2020-04-14-tidyphreeqc_1/tidyphreeqc_part_1/</link>
      <pubDate>Tue, 14 Apr 2020 00:00:00 +0000</pubDate>
      <guid>/post/2020-04-14-tidyphreeqc_1/tidyphreeqc_part_1/</guid>
      <description>


&lt;p&gt;&lt;a href=&#34;https://www.usgs.gov/software/phreeqc-version-3&#34;&gt;PHREEQC&lt;/a&gt; is a powefull program for hydrogeochemical modelling developed by the &lt;a href=&#34;https://en.wikipedia.org/wiki/United_States_Geological_Survey&#34;&gt;USGS&lt;/a&gt;. I like to think of it as a construction kit for (series of) virtual beakers, where all sorts of reactants can be mixed together.&lt;/p&gt;
&lt;p&gt;So while PHREEQC in itself is a tremendous framework, practical work with that program is often limited by a lack of native features that allow for iterativ or repetitive modelling routines. A PHREEQC-program is a set of command strings, but there is no comfortable way e.g. to set up a for-loop to map out a matrix of variables.&lt;/p&gt;
&lt;p&gt;As far as I am aware, several attempts have been made to overcome this issue and to complement PHREEQC with programmable functionality. PHREEQC itself has an inbuild interpreter for &lt;a href=&#34;https://en.wikipedia.org/wiki/BASIC&#34;&gt;BASIC&lt;/a&gt; and the program &lt;a href=&#34;http://www.phreeplot.org/&#34;&gt;PHREEPLOT&lt;/a&gt; implements routines to generate complex figures from repetitive calls to PHREEQC. Personally, I found those interfaces unsuitable for my daily workflow, but your experience may vary.&lt;/p&gt;
&lt;p&gt;My favourite way of interacting with PHREEQC as of today is the &lt;a href=&#34;https://www.r-project.org/&#34;&gt;R&lt;/a&gt;-Package &lt;a href=&#34;https://github.com/paleolimbot/tidyphreeqc/blob/master/README.md&#34;&gt;Tidyphreeqc&lt;/a&gt; by &lt;a href=&#34;https://fishandwhistle.net/cv/&#34;&gt;Dewey Dunnington, phd&lt;/a&gt;. It provides various functions to make the construction of PHREEQC-input files comfortable and automatable. You can push your input directly into PHREEQC and retrieve the output without ever having to leave your cozy R-Studio panes. Due to this close integration, it becomes easy to harvest R’s capabilities as a programming language and its excuisite visualization tools.&lt;/p&gt;
&lt;p&gt;The most obvious (and probably most important) use case for coupling PHREEQC with a fully programmable interface is to generate thousands of models to map out the effect of parameter combinations on a discrete chemical system. For Tidyphreeqc this has been demonstrated in &lt;a href=&#34;https://fishandwhistle.net/post/2018/pourbaix-ish-diagrams-using-phreeqc-and-r/&#34;&gt;this Blogpost&lt;/a&gt; by the packages’ creator by generating the &lt;a href=&#34;https://en.wikipedia.org/wiki/Pourbaix_diagram&#34;&gt;Pourbaix-Diagram&lt;/a&gt; for Manganese.&lt;/p&gt;
&lt;p&gt;In todays post we will explore another advantage of the Tidyphreeqc-Package: establishing non-steady solution input into a 1D-Transport coloumn.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Digital Point Counting for Mineralogical Thin Sections</title>
      <link>/post/digital_point_counting/</link>
      <pubDate>Fri, 10 Apr 2020 00:00:00 +0000</pubDate>
      <guid>/post/digital_point_counting/</guid>
      <description>


&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Point_counting_(geology)&#34;&gt;Mineral point counting&lt;/a&gt; in &lt;a href=&#34;https://en.wikipedia.org/wiki/Thin_section&#34;&gt;geological thin sections&lt;/a&gt; is a simple yet very useful technique that aims at determining the relative proportion of different minerals within a rock. Quantifying this can give insight on the evolution of a magma within different stages of melt evolution or even underpin comparisons of similar melts from different magmatic complexes. Point counting in it’s classical form is, however, also &lt;a href=&#34;https://www.youtube.com/watch?v=3YJHryX7f1U&#34;&gt;famously laborious&lt;/a&gt;, as it traditionally involves manually shifting the microscopes stage by a fixed interval and basically keeping a tally of what you see at each position.&lt;/p&gt;
&lt;p&gt;With the advent of computerized image processing techniques, digital point counting offers the potential to gather the desired information at a fraction of the time and effort used for the manual technique. This makes it possible to apply point counting to large databases of thin section imagery. I would argue that being able to massively broaden the base of available point counting data by (semi-)automating the gathering process is in itself a significant contribution to the importance of the role that point counting can play in geological investigations.&lt;/p&gt;
&lt;p&gt;In this blogpost we will explore possibilities for digital point counting using &lt;a href=&#34;https://www.r-project.org/&#34;&gt;R&lt;/a&gt; and the &lt;a href=&#34;https://github.com/Ignimbrit/mincountr/blob/master/README.md&#34;&gt;mincountr&lt;/a&gt; library, a little package I wrote to bundle a few basic tools to ease some of the more repetitive tasks of that subject.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# You can install the mincountr package from github
# remotes::install_github(&amp;quot;Ignimbrit/mincountr&amp;quot;)

library(mincountr)
library(ggplot2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Say you have collected an image from a mineral-bearing thin section e.g. in an electron microprobe session and wonder about the relative share of the different phases in your sample. Your image might look something like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;myimage &amp;lt;- mcr_load_image(
  system.file(&amp;quot;extdata&amp;quot;, &amp;quot;testim.png&amp;quot;, package = &amp;quot;mincountr&amp;quot;)
  )
plot(myimage)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-04-10-mincountr/index_files/figure-html/load%20image-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;As you can see, the different levels of brightness in the image allows the observer to distinguish between several distinct phases. There is a large, very bright mineral, some lightgrey minerals, a darkgrey, glassy matrix, some black holes and so on. With &lt;code&gt;mincountr&lt;/code&gt; we are able to translate this qualitative optical assessment into practical numbers. First let’s have a look at the density-distribution (like a continuous histogram) of the images brightness.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mcr_inspect_phases(myimage)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-04-10-mincountr/index_files/figure-html/plot%20brightness-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Here we can see that the four phases we distinguished in the image above show up in the density distribution as distinct peaks of specific brightness values. We can use this to assign a brightness-range to certain phases.
The peak on the far left (most dark) corresponds likely to the hole we’ve seen in our thin section image. The peak’s value range lays between value ~0-0.05. Other peaks (from left to right) range from 0.3-0.45 (glassy matrix?), from 0.5-0.65 (light gray minerals?) and from 0.92-1 (bright minerals?). Let me illustrate what I mean:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mcr_inspect_phases(myimage) +
  ggplot2::geom_vline(
    xintercept = c(0, 0.05, 0.3, 0.45, 0.5, 0.65, 0.92, 1),
    color = &amp;quot;red&amp;quot;
      )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-04-10-mincountr/index_files/figure-html/illustrate%20peakborders-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now in this example we just chose the borders of the peak by hand. This is probably the safest method of constraining your brightness-levels, as it allows you to chip in your personal mineralogical expertise. However, sometimes you have a large stack of images you want to work with and probably not the time to constrain peak-ranges by hand every single time. This is why mincountr comes with an automatic mechanism to generate those numbers for you.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;myconstrains &amp;lt;- mcr_autoconstrain(myimage)
print(myconstrains)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 4
##      x1 peakpos     x2    ID
##   &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;
## 1 0       0     0.0283     1
## 2 0.338   0.382 0.437      2
## 3 0.501   0.559 0.612      3
## 4 0.963   0.989 1          4&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;mcr_autoconstrain&lt;/code&gt; function automatically detects peaks and notes their position (&lt;code&gt;peakpos&lt;/code&gt;) and then goes on and calculates their borders both on the left-hand-side (&lt;code&gt;x1&lt;/code&gt;) and on the right hand side (&lt;code&gt;x2&lt;/code&gt;). Under the hood, &lt;code&gt;mcr_autoconstrain&lt;/code&gt; identifies turning points in the brightness-“spectra”, cuts it into pieces, one piece per peak, and then loops over the single-peak spectra-pieces to calculate the half-height-width.&lt;/p&gt;
&lt;p&gt;Now we have all the information we need to assign certain areas of our original image to distinct phases. The mincountr-package comes with a function that lets you inspect what this assignment looks like.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mcr_inspect_assignment(
  myimage,
  lhs = myconstrains$x1,
  rhs = myconstrains$x2
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-04-10-mincountr/index_files/figure-html/check%20assignment-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;As every pixel in the original image was now assigned to one of the 7 levels shown in the picture above, we can go ahead and just count the pixels and then calculate the relative share of each group.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;myresult &amp;lt;- mcr_herd_minerals(
  myimage,
  lhs = myconstrains$x1,
  rhs = myconstrains$x2
)
print(myresult)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 7 x 3
##   Phase_ID pixels proportion_percentage
##      &amp;lt;int&amp;gt;  &amp;lt;int&amp;gt;                 &amp;lt;dbl&amp;gt;
## 1        1  34862                  9.88
## 2        2  23583                  6.68
## 3        3  97086                 27.5 
## 4        4  18786                  5.32
## 5        5  70327                 19.9 
## 6        6  23485                  6.66
## 7        7  84749                 24.0&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Working with climate data from the German Meteorological Service (DWD)</title>
      <link>/post/working-with-rdwd/</link>
      <pubDate>Wed, 08 Apr 2020 00:00:00 +0000</pubDate>
      <guid>/post/working-with-rdwd/</guid>
      <description>


&lt;p&gt;Many tasks in the realm of Hydrogeology require data from meteorological observations to be taken into account. If you are working on such a project that happens to be located in Germany, you can count yourself lucky, because the &lt;a href=&#34;www.dwd.de&#34;&gt;Deutscher Wetterdienst&lt;/a&gt; (DWD, German Meteorological Service) is providing a cornucopia of both brand new and historic data for free via its &lt;a href=&#34;https://opendata.dwd.de/climate_environment/CDC/&#34;&gt;climate datacenter&lt;/a&gt; (CDC). The interface to that server, however, can be somewhat confusing at first, due to the mass of very different data formats and the poignant absence of any meaningful GUI. In this post we will therefore explore how we can use &lt;a href=&#34;www.r-project.org&#34;&gt;R&lt;/a&gt; and specifically the &lt;a href=&#34;https://cran.r-project.org/web/packages/rdwd/index.html&#34;&gt;rdwd&lt;/a&gt; library to access data from the CDC and turn it into a (hopefully) meaningful visualization.&lt;/p&gt;
&lt;p&gt;For demonstration purposes, let’s look at how the number of days with snowcover changed in Germany over the years, a task I came up with this winter, while looking out of the window and, well, missing snow. As mentioned, we will use R-package rdwd, which &lt;a href=&#34;https://bookdown.org/brry/rdwd/&#34;&gt;ships with an excellent documentation&lt;/a&gt; that we can use to look up how to find the data we are interested in, download it and load it into R.&lt;/p&gt;
&lt;p&gt;By and at large, DWD-datasets can be divided into two categories:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Data associated with a discrete weather station&lt;/li&gt;
&lt;li&gt;Gridded data spanning a larger area (usually all of Germany)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As we are interested in snow cover data for all of Germany, we will look into the gridded data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# first let&amp;#39;s get our R-session set up properly
library(tidyverse) # this is for data-wrangling and -visualisation 
library(rdwd) # this is where we get our data from
library(raster) # this will help us work with raster data
library(sp) # this is used here to convert between spatial data formats
library(paletteer) # pretty color palettes for plots
library(magick) # his will be used to render the final animation

# The next step is to locate the data we are interested in on the CDC-Server

# Load the adresses of all available files 
data(gridIndex)
# only keep the adresses of data we are interested in
links &amp;lt;- gridIndex[str_detect(gridIndex, &amp;quot;^annual/snowcover_days/grids&amp;quot;)]
head(links, n = 3) #inspect what we&amp;#39;ve got&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;annual/snowcover_days/grids_germany_annual_snowcover_days_1951_17.asc.gz&amp;quot;
## [2] &amp;quot;annual/snowcover_days/grids_germany_annual_snowcover_days_1952_17.asc.gz&amp;quot;
## [3] &amp;quot;annual/snowcover_days/grids_germany_annual_snowcover_days_1953_17.asc.gz&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tail(links, n = 3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;annual/snowcover_days/grids_germany_annual_snowcover_days_2016_17.asc.gz&amp;quot;
## [2] &amp;quot;annual/snowcover_days/grids_germany_annual_snowcover_days_2017_17.asc.gz&amp;quot;
## [3] &amp;quot;annual/snowcover_days/grids_germany_annual_snowcover_days_2018_17.asc.gz&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So we managed to locate the position of 68 files of gridded snow-cover data. Each file contains the data for a single year and we have files spanning the period from 1951 to 2018. Now that we know where we can find the data, the next steps are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Downloading the data to your hard disc&lt;/li&gt;
&lt;li&gt;Actually loading the data into R&lt;/li&gt;
&lt;li&gt;Shaping the data into a format to work on with&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is achieved mainly by two functions provided by &lt;code&gt;rdwd&lt;/code&gt;. We will download the data with &lt;code&gt;dataDWD&lt;/code&gt; and load it with &lt;code&gt;readDWD&lt;/code&gt;. Please note that the downloaded files are stored on your hard drive and take up approximately 200 MB of space. As we need to download all 68 files, we will iterate over every element of &lt;code&gt;links&lt;/code&gt;, applying the function-in-question on the way.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;map(
  links, 
  dataDWD, 
  base = gridbase, 
  joinbf = TRUE, 
  read = FALSE
  )

# Executed like this, the downloaded files will be stored in a subdirectory
# named &amp;quot;DWDdata/&amp;quot;. Let&amp;#39;s see what we&amp;#39;ve got!

lokallinks &amp;lt;- list.files(&amp;quot;DWDdata/&amp;quot;)

# In the next step we will do something a bit more complex.
# The goal is to load the downloaded files into R and give them a structure
# that is convenient to work with. As we want this to happen with all 68
# files, we will define a function that loads a file and returns the data 
# in the desired way and then apply said function to every file.

grabmydata &amp;lt;- function(file){
  
  # first let&amp;#39;s load the data and store it in a nice data.frame
  df &amp;lt;- readDWD(paste0(&amp;quot;DWDdata/&amp;quot;, file)) %&amp;gt;% 
    as(&amp;quot;SpatialPixelsDataFrame&amp;quot;) %&amp;gt;% 
    as.data.frame()
  
  # give it some nice coloumn names
  colnames(df) &amp;lt;- c(&amp;quot;value&amp;quot;, &amp;quot;x&amp;quot;, &amp;quot;y&amp;quot;)
  
  # next we want to know the year that the data corresponds to
  year &amp;lt;- file %&amp;gt;% 
    str_remove(&amp;quot;annual_snowcover_days_grids_germany_annual_snowcover_days_&amp;quot;) %&amp;gt;% 
    str_remove(&amp;quot;_17.asc.gz&amp;quot;) %&amp;gt;% 
    as.integer()
  
  # Now just store the year as another variable in the data.frame
  df %&amp;gt;% mutate(year = year)
}

# Now that we have a function that knows how to handle a file, iterate over
# all files and append the result rowwise.
df &amp;lt;- map_dfr(lokallinks, grabmydata)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we have all the data nicely loaded into our global environment, we can start visualizing them. In a first step, let’s look at the situation in the year 2008. We can later expand this to include all years.&lt;/p&gt;
&lt;p&gt;There is one little catch, though. To make the figure more visually appealing, we will apply a logarithmic color gradient, while keeping the actual scale linear.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_08 &amp;lt;- df %&amp;gt;% 
  filter(year == 2008)

# In the plot legend we want to see what the color looks like for the following 
# numbers of days of snow cover:

snow_days_legend &amp;lt;- c(0.1, 0.3, 1, 3, 10, 30)

ggplot(
  data = df_08,
  aes(
    x = x,
    y = y,
    fill = log10(value)
  )
) +
  geom_tile() +
    annotate(
      geom = &amp;quot;label&amp;quot;, x = max(df$x) - 140000, y = min(df$y) - 10000,
      label = &amp;quot;source: Deutscher Wetterdienst&amp;quot;,
      size = 2
    ) +
  labs(
    title = &amp;quot;Total days of snow in 2008&amp;quot;,
    fill = &amp;quot;days with\nsnow-cover&amp;quot;
  ) +
  scale_fill_paletteer_c(
    &amp;quot;ggthemes::Classic Orange-Blue&amp;quot;,
    limits = log10(c(0.1, 60)),
    breaks = log10(snow_days_legend),
    labels = snow_days_legend
  ) +
  theme_bw() +
  theme(
    axis.title = element_blank(),
    axis.text = element_blank(),
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;Schnee_2008.png&#34; width=&#34;400px&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now this is nice, but it only shows us the situation for a single year, which tells us nothing about how the snow-cover-situation changed over time. Question is: how do we include the plots for the other years? One might be tempted to work with facets here, but faceting 68 plots will result in a visual overload. The better solution is to build a little gif.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_list &amp;lt;- df %&amp;gt;% 
  group_split(year)

# Make a time-series vector for iteration
ts &amp;lt;- map_dbl(df_list, function(x) {first(x$year)})

# here we iterate along the years, plotting each annual dataset and subsequently
# saving the resulting image to the hard disc. This might take a while. The
# produced data has a size of ~7Mb

# ATTENTION: note that I am saving the plots in a subdirectory called &amp;quot;facets&amp;quot;.
# ggsave will not create that subdir automatically, so you may have to set it up
# manually. I decided not to create it in this code chunk as that would equal
# messing up other peoples folder-system, which I was told is bad style.

for (i in seq_along(ts)){
  gif_facet &amp;lt;- ggplot(
    data = df_list[[i]],
    aes(
      x = x,
      y = y,
      fill = log10(value)
    )
  ) +
    geom_tile() +
    annotate(
      geom = &amp;quot;label&amp;quot;, x = max(df$x) - 140000, y = min(df$y) - 10000,
      label = &amp;quot;source: Deutscher Wetterdienst&amp;quot;,
      size = 2
    ) +
    labs(
      title = paste0(&amp;quot;Total days of snow in &amp;quot;, ts[i]),
      fill = &amp;quot;days with\nsnow-cover&amp;quot;
    ) +
    scale_fill_paletteer_c(
      &amp;quot;ggthemes::Classic Orange-Blue&amp;quot;,
      limits = log10(c(0.1, 60)),
      breaks = log10(snow_days_legend),
      labels = snow_days_legend
    ) +
    theme_bw() +
    theme(
      axis.title = element_blank(),
      axis.text = element_blank(),
    )
  
  ggsave(
    filename = paste0(&amp;quot;facets/snow_&amp;quot;, ts[i],&amp;quot;.png&amp;quot;), # make sure this works on your machine!
    plot = gif_facet,
    width = 10, height = 12, units = &amp;quot;cm&amp;quot;, dpi = 150
  )
}

# get the path of the created images
plotlist &amp;lt;- list.files(&amp;quot;facets/&amp;quot;, pattern = &amp;quot;.png$&amp;quot;)

# construct the actual gif
image_write_gif(
  image_read(paste0(&amp;quot;facets/&amp;quot;, plotlist)),
  path = &amp;quot;Snowdays_in_Ger.gif&amp;quot;,
  delay = 0.5
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;featured.gif&#34; width=&#34;400px&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Impressum</title>
      <link>/impressum/</link>
      <pubDate>Sun, 05 Apr 2020 18:28:03 +0200</pubDate>
      <guid>/impressum/</guid>
      <description>&lt;h2 id=&#34;angaben-gemäß--5-tmg&#34;&gt;&lt;strong&gt;Angaben gemäß § 5 TMG&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Dr. rer. nat. Sören Wilke&lt;br&gt;
Achillesstraße 94&lt;br&gt;
13125 Berlin&lt;/p&gt;
&lt;h2 id=&#34;kontakt&#34;&gt;&lt;strong&gt;Kontakt&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Telefon: +49 (0) 151 6453 2291&lt;br&gt;
E-Mail: &lt;a href=&#34;mailto:swilke@gmx.de&#34;&gt;swilke@gmx.de&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;haftung-für-inhalte&#34;&gt;&lt;strong&gt;Haftung für Inhalte&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Als Diensteanbieter sind wir gemäß § 7 Abs.1 TMG für eigene Inhalte auf diesen Seiten nach den
allgemeinen Gesetzen verantwortlich. Nach §§ 8 bis 10 TMG sind wir als Diensteanbieter jedoch nicht
verpflichtet, übermittelte oder gespeicherte fremde Informationen zu überwachen oder nach Umständen zu
forschen, die auf eine rechtswidrige Tätigkeit hinweisen.
Verpflichtungen zur Entfernung oder Sperrung der Nutzung von Informationen nach den allgemeinen
Gesetzen bleiben hiervon unberührt. Eine diesbezügliche Haftung ist jedoch erst ab dem Zeitpunkt der
Kenntnis einer konkreten Rechtsverletzung möglich. Bei Bekanntwerden von entsprechenden
Rechtsverletzungen werden wir diese Inhalte umgehend entfernen.&lt;/p&gt;
&lt;h3 id=&#34;haftung-für-links&#34;&gt;&lt;strong&gt;Haftung für Links&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Unser Angebot enthält Links zu externen Websites Dritter, auf deren Inhalte wir keinen Einfluss haben.
Deshalb können wir für diese fremden Inhalte auch keine Gewähr übernehmen. Für die Inhalte der
verlinkten Seiten ist stets der jeweilige Anbieter oder Betreiber der Seiten verantwortlich. Die verlinkten
Seiten wurden zum Zeitpunkt der Verlinkung auf mögliche Rechtsverstöße überprüft. Rechtswidrige Inhalte
waren zum Zeitpunkt der Verlinkung nicht erkennbar.
Eine permanente inhaltliche Kontrolle der verlinkten Seiten ist jedoch ohne konkrete Anhaltspunkte einer
Rechtsverletzung nicht zumutbar. Bei Bekanntwerden von Rechtsverletzungen werden wir derartige Links
umgehend entfernen.&lt;/p&gt;
&lt;h3 id=&#34;urheberrecht&#34;&gt;&lt;strong&gt;Urheberrecht&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Die durch die Seitenbetreiber erstellten Inhalte und Werke auf diesen Seiten unterliegen dem deutschen
Urheberrecht. Die Vervielfältigung, Bearbeitung, Verbreitung und jede Art der Verwertung außerhalb der
Grenzen des Urheberrechtes bedürfen der schriftlichen Zustimmung des jeweiligen Autors bzw. Erstellers.
Downloads und Kopien dieser Seite sind nur für den privaten, nicht kommerziellen Gebrauch gestattet.
Soweit die Inhalte auf dieser Seite nicht vom Betreiber erstellt wurden, werden die Urheberrechte Dritter
beachtet. Insbesondere werden Inhalte Dritter als solche gekennzeichnet. Sollten Sie trotzdem auf eine
Urheberrechtsverletzung aufmerksam werden, bitten wir um einen entsprechenden Hinweis. Bei
Bekanntwerden von Rechtsverletzungen werden wir derartige Inhalte umgehend entfernen.&lt;/p&gt;
&lt;p&gt;Quelle:

&lt;a href=&#34;https://www.e-recht24.de/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;eRecht24&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;nutzung-von-computercode&#34;&gt;Nutzung von Computercode&lt;/h2&gt;
&lt;p&gt;Der auf dieser Webseite veröffentlichte Programmcode steht unter der MIT-Lizenz. Es gelten die folgenden Bedingungen:&lt;/p&gt;
&lt;p&gt;Urheberrecht (c) 2020 Sören Wilke&lt;/p&gt;
&lt;p&gt;Jedem, der eine Kopie dieser Software und der zugehörigen Dokumentationsdateien (die &amp;ldquo;Software&amp;rdquo;) erhält, wird hiermit kostenlos die Erlaubnis erteilt, ohne Einschränkung mit der Software zu handeln, einschließlich und ohne Einschränkung der Rechte zur Nutzung, zum Kopieren, Ändern, Zusammenführen, Veröffentlichen, Verteilen, Unterlizenzieren und/oder Verkaufen von Kopien der Software, und Personen, denen die Software zur Verfügung gestellt wird, dies unter den folgenden Bedingungen zu gestatten:&lt;/p&gt;
&lt;p&gt;Der obige Urheberrechtshinweis und dieser Genehmigungshinweis müssen in allen Kopien oder wesentlichen Teilen der Software enthalten sein.&lt;/p&gt;
&lt;p&gt;DIE SOFTWARE WIRD OHNE MÄNGELGEWÄHR UND OHNE JEGLICHE AUSDRÜCKLICHE ODER STILLSCHWEIGENDE GEWÄHRLEISTUNG, EINSCHLIEßLICH, ABER NICHT BESCHRÄNKT AUF DIE GEWÄHRLEISTUNG DER MARKTGÄNGIGKEIT, DER EIGNUNG FÜR EINEN BESTIMMTEN ZWECK UND DER NICHTVERLETZUNG VON RECHTEN DRITTER, ZUR VERFÜGUNG GESTELLT. DIE AUTOREN ODER URHEBERRECHTSINHABER SIND IN KEINEM FALL HAFTBAR FÜR ANSPRÜCHE, SCHÄDEN ODER ANDERE VERPFLICHTUNGEN, OB IN EINER VERTRAGS- ODER HAFTUNGSKLAGE, EINER UNERLAUBTEN HANDLUNG ODER ANDERWEITIG, DIE SICH AUS, AUS ODER IN VERBINDUNG MIT DER SOFTWARE ODER DER NUTZUNG ODER ANDEREN GESCHÄFTEN MIT DER SOFTWARE ERGEBEN.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Publication</title>
      <link>/publication/</link>
      <pubDate>Sun, 05 Apr 2020 15:51:57 +0200</pubDate>
      <guid>/publication/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Slides</title>
      <link>/slides/example/</link>
      <pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate>
      <guid>/slides/example/</guid>
      <description>&lt;h1 id=&#34;create-slides-in-markdown-with-academic&#34;&gt;Create slides in Markdown with Academic&lt;/h1&gt;
&lt;p&gt;
&lt;a href=&#34;https://sourcethemes.com/academic/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Academic&lt;/a&gt; | 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content/#create-slides&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Efficiently write slides in Markdown&lt;/li&gt;
&lt;li&gt;3-in-1: Create, Present, and Publish your slides&lt;/li&gt;
&lt;li&gt;Supports speaker notes&lt;/li&gt;
&lt;li&gt;Mobile friendly slides&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;controls&#34;&gt;Controls&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Next: &lt;code&gt;Right Arrow&lt;/code&gt; or &lt;code&gt;Space&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Previous: &lt;code&gt;Left Arrow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Start: &lt;code&gt;Home&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Finish: &lt;code&gt;End&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Overview: &lt;code&gt;Esc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Speaker notes: &lt;code&gt;S&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Fullscreen: &lt;code&gt;F&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Zoom: &lt;code&gt;Alt + Click&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/hakimel/reveal.js#pdf-export&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PDF Export&lt;/a&gt;: &lt;code&gt;E&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;code-highlighting&#34;&gt;Code Highlighting&lt;/h2&gt;
&lt;p&gt;Inline code: &lt;code&gt;variable&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Code block:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;porridge = &amp;quot;blueberry&amp;quot;
if porridge == &amp;quot;blueberry&amp;quot;:
    print(&amp;quot;Eating...&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;math&#34;&gt;Math&lt;/h2&gt;
&lt;p&gt;In-line math: $x + y = z$&lt;/p&gt;
&lt;p&gt;Block math:&lt;/p&gt;
&lt;p&gt;$$
f\left( x \right) = ;\frac{{2\left( {x + 4} \right)\left( {x - 4} \right)}}{{\left( {x + 4} \right)\left( {x + 1} \right)}}
$$&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;fragments&#34;&gt;Fragments&lt;/h2&gt;
&lt;p&gt;Make content appear incrementally&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{% fragment %}} One {{% /fragment %}}
{{% fragment %}} **Two** {{% /fragment %}}
{{% fragment %}} Three {{% /fragment %}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Press &lt;code&gt;Space&lt;/code&gt; to play!&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;fragment &#34; &gt;
One
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
&lt;strong&gt;Two&lt;/strong&gt;
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
Three
&lt;/span&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;A fragment can accept two optional parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;class&lt;/code&gt;: use a custom style (requires definition in custom CSS)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weight&lt;/code&gt;: sets the order in which a fragment appears&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;speaker-notes&#34;&gt;Speaker Notes&lt;/h2&gt;
&lt;p&gt;Add speaker notes to your presentation&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{% speaker_note %}}
- Only the speaker can read these notes
- Press `S` key to view
{{% /speaker_note %}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Press the &lt;code&gt;S&lt;/code&gt; key to view the speaker notes!&lt;/p&gt;
&lt;aside class=&#34;notes&#34;&gt;
  &lt;ul&gt;
&lt;li&gt;Only the speaker can read these notes&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;S&lt;/code&gt; key to view&lt;/li&gt;
&lt;/ul&gt;
&lt;/aside&gt;
&lt;hr&gt;
&lt;h2 id=&#34;themes&#34;&gt;Themes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;black: Black background, white text, blue links (default)&lt;/li&gt;
&lt;li&gt;white: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;league: Gray background, white text, blue links&lt;/li&gt;
&lt;li&gt;beige: Beige background, dark text, brown links&lt;/li&gt;
&lt;li&gt;sky: Blue background, thin dark text, blue links&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;night: Black background, thick white text, orange links&lt;/li&gt;
&lt;li&gt;serif: Cappuccino background, gray text, brown links&lt;/li&gt;
&lt;li&gt;simple: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;solarized: Cream-colored background, dark green text, blue links&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;/img/boards.jpg&#34;
  &gt;

&lt;h2 id=&#34;custom-slide&#34;&gt;Custom Slide&lt;/h2&gt;
&lt;p&gt;Customize the slide style and background&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{&amp;lt; slide background-image=&amp;quot;/img/boards.jpg&amp;quot; &amp;gt;}}
{{&amp;lt; slide background-color=&amp;quot;#0000FF&amp;quot; &amp;gt;}}
{{&amp;lt; slide class=&amp;quot;my-style&amp;quot; &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;custom-css-example&#34;&gt;Custom CSS Example&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s make headers navy colored.&lt;/p&gt;
&lt;p&gt;Create &lt;code&gt;assets/css/reveal_custom.css&lt;/code&gt; with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.reveal section h1,
.reveal section h2,
.reveal section h3 {
  color: navy;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;questions&#34;&gt;Questions?&lt;/h1&gt;
&lt;p&gt;
&lt;a href=&#34;https://spectrum.chat/academic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ask&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content/#create-slides&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rhyolite-MELTS vs DERP – Reply to Comment by Gualda et al. on ‘The Effect of Anorthite Content and Water on Quartz–Feldspar Cotectic Compositions in the Rhyolitic System and Implications for Geobarometry’ by Wilke et al. (2017), Journal of Petrology, 58, No. 4, 789–818</title>
      <link>/publication/derp2/</link>
      <pubDate>Fri, 01 Feb 2019 00:00:00 +0000</pubDate>
      <guid>/publication/derp2/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The Effect of Anorthite Content and Water on Quartz–Feldspar Cotectic Compositions in the Rhyolitic System and Implications for Geobarometry</title>
      <link>/publication/derp1/</link>
      <pubDate>Mon, 24 Jul 2017 00:00:00 +0000</pubDate>
      <guid>/publication/derp1/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The system quartz-albite-orthoclase-anorthite-H2O as a geobarometer: experimental calibration and application to rhyolites of the Snake River Plain, Yellowstone, USA</title>
      <link>/publication/promotion/</link>
      <pubDate>Fri, 24 Jun 2016 00:00:00 +0000</pubDate>
      <guid>/publication/promotion/</guid>
      <description></description>
    </item>
    
    <item>
      <title>External Project</title>
      <link>/project/external-project/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      <guid>/project/external-project/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Internal Project</title>
      <link>/project/internal-project/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      <guid>/project/internal-project/</guid>
      <description>&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p&gt;
&lt;p&gt;Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p&gt;
&lt;p&gt;Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p&gt;
&lt;p&gt;Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p&gt;
&lt;p&gt;Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Practical Method for Accurate Measurement of Trace Level Fluorine in Mg‐ and Fe‐Bearing Minerals and Glasses Using Electron Probe Microanalysis</title>
      <link>/publication/microprobe/</link>
      <pubDate>Wed, 23 Dec 2015 00:00:00 +0000</pubDate>
      <guid>/publication/microprobe/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Experimental investigation of the effect of Ca, Fe and Ti on cotectic compositions of the rhyolitic system</title>
      <link>/publication/carodata/</link>
      <pubDate>Sun, 01 Mar 2015 00:00:00 +0000</pubDate>
      <guid>/publication/carodata/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
